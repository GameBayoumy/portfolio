name: 🔍 Commit Validation

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  validate-commits:
    name: 📝 Validate Conventional Commits
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install commitlint
        run: |
          npm install --global @commitlint/cli @commitlint/config-conventional

      - name: 📝 Validate commit messages (PR)
        if: github.event_name == 'pull_request'
        run: |
          echo "Validating commits in PR from ${{ github.event.pull_request.base.sha }} to ${{ github.event.pull_request.head.sha }}"
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: 📝 Validate last commit (Push)
        if: github.event_name == 'push'
        run: |
          echo "Validating last commit: ${{ github.sha }}"
          npx commitlint --from HEAD~1 --to HEAD --verbose

      - name: 📋 Generate commit report
        if: failure()
        run: |
          echo "## ❌ Commit Validation Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Your commit messages don't follow the conventional commit format." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Required Format:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "type(scope): description" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Valid Types:" >> $GITHUB_STEP_SUMMARY
          echo "- ✨ **feat**: A new feature" >> $GITHUB_STEP_SUMMARY
          echo "- 🐛 **fix**: A bug fix" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 **docs**: Documentation changes" >> $GITHUB_STEP_SUMMARY
          echo "- 💄 **style**: Code style changes" >> $GITHUB_STEP_SUMMARY
          echo "- ♻️ **refactor**: Code refactoring" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ **perf**: Performance improvements" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **test**: Adding or updating tests" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 **build**: Build system changes" >> $GITHUB_STEP_SUMMARY
          echo "- 👷 **ci**: CI/CD changes" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **chore**: Other changes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Examples:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "feat(linkedin): add professional timeline component" >> $GITHUB_STEP_SUMMARY
          echo "fix(github): resolve API rate limiting issues" >> $GITHUB_STEP_SUMMARY
          echo "docs: update installation instructions" >> $GITHUB_STEP_SUMMARY
          echo "perf(3d): optimize model loading performance" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  lint-commit-messages:
    name: 🧹 Lint Commit Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Check commit message quality
        run: |
          echo "## 📋 Commit Message Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get all commit messages in PR
          COMMITS=$(git log --format="%H|%s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
          
          echo "### Commits in this PR:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          COMMIT_COUNT=0
          QUALITY_SCORE=0
          
          while IFS='|' read -r hash message; do
            if [ -n "$hash" ]; then
              COMMIT_COUNT=$((COMMIT_COUNT + 1))
              echo "- \`${hash:0:7}\`: $message" >> $GITHUB_STEP_SUMMARY
              
              # Quality checks
              if [[ ${#message} -ge 10 && ${#message} -le 100 ]]; then
                QUALITY_SCORE=$((QUALITY_SCORE + 1))
              fi
              
              if [[ $message =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\(.+\))?:.+ ]]; then
                QUALITY_SCORE=$((QUALITY_SCORE + 1))
              fi
              
              if [[ $message =~ ^[a-z] ]]; then
                QUALITY_SCORE=$((QUALITY_SCORE + 1))
              fi
            fi
          done <<< "$COMMITS"
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $COMMIT_COUNT -gt 0 ]; then
            PERCENTAGE=$((QUALITY_SCORE * 100 / (COMMIT_COUNT * 3)))
            echo "### Quality Score: ${PERCENTAGE}%" >> $GITHUB_STEP_SUMMARY
            
            if [ $PERCENTAGE -ge 80 ]; then
              echo "✅ **Excellent** commit message quality!" >> $GITHUB_STEP_SUMMARY
            elif [ $PERCENTAGE -ge 60 ]; then
              echo "⚠️ **Good** commit message quality, with room for improvement." >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Poor** commit message quality. Please improve your commit messages." >> $GITHUB_STEP_SUMMARY
            fi
          fi

  check-breaking-changes:
    name: 💥 Detect Breaking Changes
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Scan for breaking changes
        run: |
          echo "## 💥 Breaking Changes Detection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check commit messages for breaking changes
          BREAKING_COMMITS=$(git log --format="%H|%s|%b" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -i "BREAKING CHANGE" || true)
          
          if [ -n "$BREAKING_COMMITS" ]; then
            echo "⚠️ **Breaking changes detected in this PR:**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$BREAKING_COMMITS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔔 This will trigger a **MAJOR** version bump when merged." >> $GITHUB_STEP_SUMMARY
            
            # Set warning annotation
            echo "::warning title=Breaking Changes Detected::This PR contains breaking changes that will trigger a major version bump"
          else
            echo "✅ No breaking changes detected in this PR." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Version Prediction:" >> $GITHUB_STEP_SUMMARY
          
          # Predict version bump
          if [ -n "$BREAKING_COMMITS" ]; then
            echo "- 📈 **MAJOR** version bump (breaking changes)" >> $GITHUB_STEP_SUMMARY
          elif git log --format="%s" ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q "^feat"; then
            echo "- 📈 **MINOR** version bump (new features)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 📈 **PATCH** version bump (fixes and improvements)" >> $GITHUB_STEP_SUMMARY
          fi