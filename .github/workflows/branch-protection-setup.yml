name: Branch Protection

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch to protect (default: main)'
        required: false
        default: 'main'
        type: string
      require_reviews:
        description: 'Number of required reviews'
        required: false
        default: '1'
        type: choice
        options: ['1', '2', '3']
      dismiss_stale_reviews:
        description: 'Dismiss stale reviews on push'
        required: false
        default: true
        type: boolean
      require_code_owner_reviews:
        description: 'Require code owner reviews'
        required: false
        default: false
        type: boolean
      enable_status_checks:
        description: 'Enable required status checks'
        required: false
        default: true
        type: boolean

  push:
    branches:
      - main
    paths:
      - .github/workflows/branch-protection-setup.yml

permissions:
  actions: read
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ github.token }}
  GH_TOKEN: ${{ github.token }}

jobs:
  precheck:
    name: Precheck permissions and branch
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has-admin: ${{ steps.check-permissions.outputs.has-admin }}
      repo-owner: ${{ steps.check-permissions.outputs.repo-owner }}
      branch-exists: ${{ steps.check-existing.outputs.branch-exists }}
      has-protection: ${{ steps.check-existing.outputs.has-protection }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ github.token }}

      - name: Check repository permissions
        id: check-permissions
        run: |
          echo "üîç Checking repository permissions..."
          REPO_INFO=$(gh api repos/${{ github.repository }} --jq '{
            permissions: .permissions,
            owner: .owner.login,
            name: .name,
            private: .private
          }' 2>/dev/null || echo '{"error": "Failed to get repo info"}')
          echo "Repository info: $REPO_INFO"
          HAS_ADMIN=$(echo "$REPO_INFO" | jq -r '.permissions.admin // false')
          REPO_OWNER=$(echo "$REPO_INFO" | jq -r '.owner // "unknown"')
          echo "has-admin=$HAS_ADMIN" >> $GITHUB_OUTPUT
          echo "repo-owner=$REPO_OWNER" >> $GITHUB_OUTPUT
          [[ "$HAS_ADMIN" == "true" ]] && echo "‚úÖ Admin permissions detected" || echo "‚ö†Ô∏è Admin permissions not detected"

      - name: Check existing branch protection
        id: check-existing
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch_name || 'main' }}"
          echo "üîç Checking existing protection for branch: $BRANCH_NAME"
          if gh api repos/${{ github.repository }}/branches/$BRANCH_NAME >/dev/null 2>&1; then
            echo "branch-exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Branch '$BRANCH_NAME' exists"
            EXISTING_PROTECTION=$(gh api repos/${{ github.repository }}/branches/$BRANCH_NAME/protection 2>/dev/null || echo "null")
            if [[ "$EXISTING_PROTECTION" != "null" ]]; then
              echo "has-protection=true" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Branch protection already exists"
            else
              echo "has-protection=false" >> $GITHUB_OUTPUT
              echo "üìù No existing branch protection found"
            fi
          else
            echo "branch-exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Branch '$BRANCH_NAME' does not exist"
          fi

  setup-branch-protection:
    name: Setup Branch Protection
    runs-on: ubuntu-latest
    needs: precheck
    if: needs.precheck.outputs.has-admin == 'true' && needs.precheck.outputs.branch-exists == 'true'
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ github.token }}

      - name: Apply branch protection rules
        id: apply-protection
        continue-on-error: true
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch_name || 'main' }}"
          REQUIRED_REVIEWS="${{ github.event.inputs.require_reviews || '1' }}"
          DISMISS_STALE="${{ github.event.inputs.dismiss_stale_reviews || 'true' }}"
          REQUIRE_CODE_OWNERS="${{ github.event.inputs.require_code_owner_reviews || 'false' }}"
          ENABLE_STATUS_CHECKS="${{ github.event.inputs.enable_status_checks || 'true' }}"
          
          echo "üõ°Ô∏è Applying branch protection to: $BRANCH_NAME"
          echo "üìã Configuration:"
          echo "  - Required reviews: $REQUIRED_REVIEWS"
          echo "  - Dismiss stale reviews: $DISMISS_STALE"
          echo "  - Require code owner reviews: $REQUIRE_CODE_OWNERS"
          echo "  - Enable status checks: $ENABLE_STATUS_CHECKS"
          
          # Build the protection configuration
          PROTECTION_CONFIG='{
            "required_status_checks": null,
            "enforce_admins": false,
            "required_pull_request_reviews": {
              "required_approving_review_count": '$REQUIRED_REVIEWS',
              "dismiss_stale_reviews": '$DISMISS_STALE',
              "require_code_owner_reviews": '$REQUIRE_CODE_OWNERS',
              "require_last_push_approval": false
            },
            "restrictions": null,
            "allow_force_pushes": false,
            "allow_deletions": false,
            "block_creations": false,
            "required_conversation_resolution": true
          }'
          
          # Add status checks if enabled
          if [[ "$ENABLE_STATUS_CHECKS" == "true" ]]; then
            STATUS_CHECKS='{
              "strict": true,
              "contexts": [
                "Code Quality",
                "Type Check",
                "Build Check"
              ]
            }'
            PROTECTION_CONFIG=$(echo "$PROTECTION_CONFIG" | jq --argjson status_checks "$STATUS_CHECKS" '.required_status_checks = $status_checks')
          fi
          
          echo "üîß Applying protection configuration..."
          echo "$PROTECTION_CONFIG" | jq '.'
          
          # Apply the protection
          RESULT=$(gh api --method PUT repos/${{ github.repository }}/branches/$BRANCH_NAME/protection \
            --input - <<< "$PROTECTION_CONFIG" 2>&1)
          
          if [[ $? -eq 0 ]]; then
            echo "‚úÖ Branch protection applied successfully"
            echo "protection-applied=true" >> $GITHUB_OUTPUT
            echo "$RESULT" | jq -r '.message // "Protection rules updated"'
          else
            echo "‚ùå Failed to apply branch protection:"
            echo "$RESULT"
            echo "protection-applied=false" >> $GITHUB_OUTPUT
          fi


      - name: Generate summary report
        if: always()
        run: |
          echo "## üõ°Ô∏è Branch Protection Setup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìã Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.event.inputs.branch_name || 'main' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Required Reviews:** ${{ github.event.inputs.require_reviews || '1' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dismiss Stale Reviews:** ${{ github.event.inputs.dismiss_stale_reviews || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Owner Reviews:** ${{ github.event.inputs.require_code_owner_reviews || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status Checks:** ${{ github.event.inputs.enable_status_checks || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ‚úÖ Results" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.precheck.outputs.has-admin }}" == "true" ]] && echo "- ‚úÖ Admin permissions confirmed" >> $GITHUB_STEP_SUMMARY || echo "- ‚ùå Admin permissions missing" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.precheck.outputs.branch-exists }}" == "true" ]] && echo "- ‚úÖ Target branch exists" >> $GITHUB_STEP_SUMMARY || echo "- ‚ùå Target branch not found" >> $GITHUB_STEP_SUMMARY
          [[ "${{ steps.apply-protection.outputs.protection-applied }}" == "true" ]] && echo "- ‚úÖ Branch protection applied" >> $GITHUB_STEP_SUMMARY || echo "- ‚ö†Ô∏è Branch protection not applied" >> $GITHUB_STEP_SUMMARY
          echo "- üìÑ CODEOWNERS present: .github/CODEOWNERS" >> $GITHUB_STEP_SUMMARY
          echo "- üìÑ PR template present: .github/pull_request_template.md" >> $GITHUB_STEP_SUMMARY
          echo "- üìÑ Issue templates present: .github/ISSUE_TEMPLATE/*" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the applied branch protection settings in repository settings" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify that required status checks are working in the next PR" >> $GITHUB_STEP_SUMMARY
          echo "3. Update CODEOWNERS file if needed with specific team/user assignments" >> $GITHUB_STEP_SUMMARY
          echo "4. Test the pull request workflow with the new templates" >> $GITHUB_STEP_SUMMARY

      - name: Workflow completion
        run: |
          echo "üéâ Branch protection setup workflow completed!"
          echo "üìä Check the summary above for detailed results"
          echo "üõ°Ô∏è Your repository is now better protected with these enhancements"

  setup-branch-protection-skipped:
    name: Setup skipped (no admin or branch missing)
    runs-on: ubuntu-latest
    needs: precheck
    if: needs.precheck.outputs.has-admin != 'true' || needs.precheck.outputs.branch-exists != 'true'
    steps:
      - name: Explain skip
        run: |
          echo "## üö´ Branch Protection Setup Skipped" >> $GITHUB_STEP_SUMMARY
          echo "- has-admin: ${{ needs.precheck.outputs.has-admin }}" >> $GITHUB_STEP_SUMMARY
          echo "- branch-exists: ${{ needs.precheck.outputs.branch-exists }}" >> $GITHUB_STEP_SUMMARY