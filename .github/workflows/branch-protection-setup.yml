name: üõ°Ô∏è Branch Protection Setup

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch to protect (default: main)'
        required: false
        default: 'main'
        type: string
      require_reviews:
        description: 'Number of required reviews'
        required: false
        default: '1'
        type: choice
        options: ['1', '2', '3']
      dismiss_stale_reviews:
        description: 'Dismiss stale reviews on push'
        required: false
        default: true
        type: boolean
      require_code_owner_reviews:
        description: 'Require code owner reviews'
        required: false
        default: false
        type: boolean
      enable_status_checks:
        description: 'Enable required status checks'
        required: false
        default: true
        type: boolean

  push:
    branches:
      - main
    paths:
      - .github/workflows/branch-protection-setup.yml

permissions:
  actions: read
  contents: write
  administration: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ github.token }}
  GH_TOKEN: ${{ github.token }}

jobs:
  precheck:
    name: ÔøΩ Precheck permissions and branch
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      has-admin: ${{ steps.check-permissions.outputs.has-admin }}
      repo-owner: ${{ steps.check-permissions.outputs.repo-owner }}
      branch-exists: ${{ steps.check-existing.outputs.branch-exists }}
      has-protection: ${{ steps.check-existing.outputs.has-protection }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: üîç Check repository permissions
        id: check-permissions
        run: |
          echo "üîç Checking repository permissions..."
          REPO_INFO=$(gh api repos/${{ github.repository }} --jq '{
            permissions: .permissions,
            owner: .owner.login,
            name: .name,
            private: .private
          }' 2>/dev/null || echo '{"error": "Failed to get repo info"}')
          echo "Repository info: $REPO_INFO"
          HAS_ADMIN=$(echo "$REPO_INFO" | jq -r '.permissions.admin // false')
          REPO_OWNER=$(echo "$REPO_INFO" | jq -r '.owner // "unknown"')
          echo "has-admin=$HAS_ADMIN" >> $GITHUB_OUTPUT
          echo "repo-owner=$REPO_OWNER" >> $GITHUB_OUTPUT
          [[ "$HAS_ADMIN" == "true" ]] && echo "‚úÖ Admin permissions detected" || echo "‚ö†Ô∏è Admin permissions not detected"

      - name: üîç Check existing branch protection
        id: check-existing
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch_name || 'main' }}"
          echo "üîç Checking existing protection for branch: $BRANCH_NAME"
          if gh api repos/${{ github.repository }}/branches/$BRANCH_NAME >/dev/null 2>&1; then
            echo "branch-exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Branch '$BRANCH_NAME' exists"
            EXISTING_PROTECTION=$(gh api repos/${{ github.repository }}/branches/$BRANCH_NAME/protection 2>/dev/null || echo "null")
            if [[ "$EXISTING_PROTECTION" != "null" ]]; then
              echo "has-protection=true" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Branch protection already exists"
            else
              echo "has-protection=false" >> $GITHUB_OUTPUT
              echo "üìù No existing branch protection found"
            fi
          else
            echo "branch-exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Branch '$BRANCH_NAME' does not exist"
          fi

  setup-branch-protection:
    name: üõ°Ô∏è Setup Branch Protection
    runs-on: ubuntu-latest
    needs: precheck
    if: needs.precheck.outputs.has-admin == 'true' && needs.precheck.outputs.branch-exists == 'true'
    timeout-minutes: 10
    steps:
      - name: ÔøΩ Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: ÔøΩüìù Create CODEOWNERS file
        id: create-codeowners
        continue-on-error: true
        run: |
          echo "üìù Checking for CODEOWNERS file..."
          
          CODEOWNERS_PATH=".github/CODEOWNERS"
          
          if [[ ! -f "$CODEOWNERS_PATH" ]] && [[ "${{ github.event.inputs.require_code_owner_reviews }}" == "true" ]]; then
            echo "üìù Creating CODEOWNERS file..."
            mkdir -p .github
            
            # Create CODEOWNERS with sensible defaults
            cat > "$CODEOWNERS_PATH" << 'EOF'
# Global code owners
* @${{ needs.precheck.outputs.repo-owner }}

# GitHub Actions workflows
/.github/ @${{ needs.precheck.outputs.repo-owner }}

# Configuration files
*.json @${{ needs.precheck.outputs.repo-owner }}
*.js @${{ needs.precheck.outputs.repo-owner }}
*.ts @${{ needs.precheck.outputs.repo-owner }}
package.json @${{ needs.precheck.outputs.repo-owner }}
tsconfig.json @${{ needs.precheck.outputs.repo-owner }}

# Documentation
*.md @${{ needs.precheck.outputs.repo-owner }}
/docs/ @${{ needs.precheck.outputs.repo-owner }}

# Security-sensitive files
.env* @${{ needs.precheck.outputs.repo-owner }}
/security/ @${{ needs.precheck.outputs.repo-owner }}
EOF
            
            echo "‚úÖ CODEOWNERS file created"
            echo "codeowners-created=true" >> $GITHUB_OUTPUT
            
            # Stage the file
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "$CODEOWNERS_PATH"
            
            if git diff --cached --quiet; then
              echo "‚ÑπÔ∏è No changes to commit"
            else
              git commit -m "chore: add CODEOWNERS file for code review requirements" \
                -m "Automated by Branch Protection Setup workflow"
              
              # Try to push, but don't fail if it doesn't work
              git push origin HEAD || echo "‚ö†Ô∏è Failed to push CODEOWNERS - may need manual commit"
            fi
          else
            echo "‚úÖ CODEOWNERS file already exists or not needed"
            echo "codeowners-created=false" >> $GITHUB_OUTPUT
          fi

      - name: üõ°Ô∏è Apply branch protection rules
        id: apply-protection
        continue-on-error: true
        run: |
          BRANCH_NAME="${{ github.event.inputs.branch_name || 'main' }}"
          REQUIRED_REVIEWS="${{ github.event.inputs.require_reviews || '1' }}"
          DISMISS_STALE="${{ github.event.inputs.dismiss_stale_reviews || 'true' }}"
          REQUIRE_CODE_OWNERS="${{ github.event.inputs.require_code_owner_reviews || 'false' }}"
          ENABLE_STATUS_CHECKS="${{ github.event.inputs.enable_status_checks || 'true' }}"
          
          echo "üõ°Ô∏è Applying branch protection to: $BRANCH_NAME"
          echo "üìã Configuration:"
          echo "  - Required reviews: $REQUIRED_REVIEWS"
          echo "  - Dismiss stale reviews: $DISMISS_STALE"
          echo "  - Require code owner reviews: $REQUIRE_CODE_OWNERS"
          echo "  - Enable status checks: $ENABLE_STATUS_CHECKS"
          
          # Build the protection configuration
          PROTECTION_CONFIG='{
            "required_status_checks": null,
            "enforce_admins": false,
            "required_pull_request_reviews": {
              "required_approving_review_count": '$REQUIRED_REVIEWS',
              "dismiss_stale_reviews": '$DISMISS_STALE',
              "require_code_owner_reviews": '$REQUIRE_CODE_OWNERS',
              "require_last_push_approval": false
            },
            "restrictions": null,
            "allow_force_pushes": false,
            "allow_deletions": false,
            "block_creations": false,
            "required_conversation_resolution": true
          }'
          
          # Add status checks if enabled
          if [[ "$ENABLE_STATUS_CHECKS" == "true" ]]; then
            STATUS_CHECKS='{
              "strict": true,
              "contexts": [
                "üé® Code Quality",
                "üîç Type Check",
                "üèóÔ∏è Build Check"
              ]
            }'
            PROTECTION_CONFIG=$(echo "$PROTECTION_CONFIG" | jq --argjson status_checks "$STATUS_CHECKS" '.required_status_checks = $status_checks')
          fi
          
          echo "üîß Applying protection configuration..."
          echo "$PROTECTION_CONFIG" | jq '.'
          
          # Apply the protection
          RESULT=$(gh api --method PUT repos/${{ github.repository }}/branches/$BRANCH_NAME/protection \
            --input - <<< "$PROTECTION_CONFIG" 2>&1)
          
          if [[ $? -eq 0 ]]; then
            echo "‚úÖ Branch protection applied successfully"
            echo "protection-applied=true" >> $GITHUB_OUTPUT
            echo "$RESULT" | jq -r '.message // "Protection rules updated"'
          else
            echo "‚ùå Failed to apply branch protection:"
            echo "$RESULT"
            echo "protection-applied=false" >> $GITHUB_OUTPUT
          fi

      - name: üìã Setup pull request template
        id: pr-template
        continue-on-error: true
        run: |
          PR_TEMPLATE_PATH=".github/pull_request_template.md"
          
          if [[ ! -f "$PR_TEMPLATE_PATH" ]]; then
            echo "üìã Creating pull request template..."
            mkdir -p .github
            
            cat > "$PR_TEMPLATE_PATH" << 'EOF'
## üìã Pull Request Summary

### üéØ What does this PR do?
<!-- Provide a brief description of the changes -->

### üîó Related Issues
<!-- Link any related issues -->
Fixes #(issue number)

### üß™ Testing
<!-- Describe how you tested these changes -->
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] Manual testing completed

### üì∏ Screenshots (if applicable)
<!-- Add screenshots for UI changes -->

### ‚úÖ Checklist
- [ ] Code follows project style guidelines
- [ ] Self-review completed
- [ ] Comments added for complex code
- [ ] Documentation updated
- [ ] Tests added/updated
- [ ] No breaking changes (or breaking changes documented)
- [ ] Security considerations addressed

### üöÄ Deployment Notes
<!-- Any special deployment considerations -->

### üìù Additional Notes
<!-- Any other information reviewers should know -->
EOF
            
            echo "‚úÖ Pull request template created"
            echo "pr-template-created=true" >> $GITHUB_OUTPUT
            
            # Stage and commit if needed
            git add "$PR_TEMPLATE_PATH"
            
            if ! git diff --cached --quiet; then
              git commit -m "chore: add pull request template for better code review process" \
                -m "Automated by Branch Protection Setup workflow"
              
              git push origin HEAD || echo "‚ö†Ô∏è Failed to push PR template - may need manual commit"
            fi
          else
            echo "‚úÖ Pull request template already exists"
            echo "pr-template-created=false" >> $GITHUB_OUTPUT
          fi

      - name: üéØ Setup issue templates
        id: issue-templates
        continue-on-error: true
        run: |
          TEMPLATES_DIR=".github/ISSUE_TEMPLATE"
          
          if [[ ! -d "$TEMPLATES_DIR" ]]; then
            echo "üéØ Creating issue templates..."
            mkdir -p "$TEMPLATES_DIR"
            
            # Bug report template
            cat > "$TEMPLATES_DIR/bug_report.yml" << 'EOF'
name: üêõ Bug Report
description: File a bug report to help us improve
title: "[Bug]: "
labels: ["bug", "needs-triage"]

body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to fill out this bug report!

  - type: textarea
    id: what-happened
    attributes:
      label: What happened?
      description: Tell us what you see!
      placeholder: A clear description of what the bug is.
    validations:
      required: true

  - type: textarea
    id: expected
    attributes:
      label: What did you expect to happen?
      description: Tell us what you expected!
      placeholder: A clear description of what you expected to happen.
    validations:
      required: true

  - type: textarea
    id: reproduce
    attributes:
      label: Steps to reproduce
      description: How can we reproduce this issue?
      placeholder: |
        1. Go to...
        2. Click on...
        3. See error...
    validations:
      required: true

  - type: textarea
    id: environment
    attributes:
      label: Environment
      description: What environment are you running?
      placeholder: |
        - OS: [e.g., macOS, Windows, Linux]
        - Browser: [e.g., Chrome, Safari, Firefox]
        - Version: [e.g., 1.0.0]
    validations:
      required: true
EOF

            # Feature request template
            cat > "$TEMPLATES_DIR/feature_request.yml" << 'EOF'
name: üöÄ Feature Request
description: Suggest an idea for this project
title: "[Feature]: "
labels: ["enhancement", "needs-triage"]

body:
  - type: markdown
    attributes:
      value: |
        Thanks for suggesting a new feature!

  - type: textarea
    id: problem
    attributes:
      label: Is your feature request related to a problem?
      description: A clear description of what the problem is.
      placeholder: I'm always frustrated when...
    validations:
      required: false

  - type: textarea
    id: solution
    attributes:
      label: Describe the solution you'd like
      description: A clear description of what you want to happen.
      placeholder: I would like...
    validations:
      required: true

  - type: textarea
    id: alternatives
    attributes:
      label: Describe alternatives you've considered
      description: Any alternative solutions or features you've considered.
      placeholder: I've also considered...
    validations:
      required: false

  - type: textarea
    id: additional-context
    attributes:
      label: Additional context
      description: Add any other context or screenshots about the feature request.
    validations:
      required: false
EOF

            echo "‚úÖ Issue templates created"
            echo "issue-templates-created=true" >> $GITHUB_OUTPUT
            
            # Stage and commit
            git add "$TEMPLATES_DIR"
            
            if ! git diff --cached --quiet; then
              git commit -m "chore: add GitHub issue templates for better issue management" \
                -m "Automated by Branch Protection Setup workflow"
              
              git push origin HEAD || echo "‚ö†Ô∏è Failed to push issue templates - may need manual commit"
            fi
          else
            echo "‚úÖ Issue templates already exist"
            echo "issue-templates-created=false" >> $GITHUB_OUTPUT
          fi

      - name: üìä Generate summary report
        if: always()
        run: |
          echo "## üõ°Ô∏è Branch Protection Setup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìã Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.event.inputs.branch_name || 'main' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Required Reviews:** ${{ github.event.inputs.require_reviews || '1' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dismiss Stale Reviews:** ${{ github.event.inputs.dismiss_stale_reviews || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Owner Reviews:** ${{ github.event.inputs.require_code_owner_reviews || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status Checks:** ${{ github.event.inputs.enable_status_checks || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ‚úÖ Results" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.precheck.outputs.has-admin }}" == "true" ]] && echo "- ‚úÖ Admin permissions confirmed" >> $GITHUB_STEP_SUMMARY || echo "- ‚ùå Admin permissions missing" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.precheck.outputs.branch-exists }}" == "true" ]] && echo "- ‚úÖ Target branch exists" >> $GITHUB_STEP_SUMMARY || echo "- ‚ùå Target branch not found" >> $GITHUB_STEP_SUMMARY
          [[ "${{ steps.apply-protection.outputs.protection-applied }}" == "true" ]] && echo "- ‚úÖ Branch protection applied" >> $GITHUB_STEP_SUMMARY || echo "- ‚ö†Ô∏è Branch protection not applied" >> $GITHUB_STEP_SUMMARY
          [[ "${{ steps.create-codeowners.outputs.codeowners-created }}" == "true" ]] && echo "- ‚úÖ CODEOWNERS file created" >> $GITHUB_STEP_SUMMARY || echo "- ‚ÑπÔ∏è CODEOWNERS file not needed/exists" >> $GITHUB_STEP_SUMMARY
          [[ "${{ steps.pr-template.outputs.pr-template-created }}" == "true" ]] && echo "- ‚úÖ PR template created" >> $GITHUB_STEP_SUMMARY || echo "- ‚ÑπÔ∏è PR template not needed/exists" >> $GITHUB_STEP_SUMMARY
          [[ "${{ steps.issue-templates.outputs.issue-templates-created }}" == "true" ]] && echo "- ‚úÖ Issue templates created" >> $GITHUB_STEP_SUMMARY || echo "- ‚ÑπÔ∏è Issue templates not needed/exist" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the applied branch protection settings in repository settings" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify that required status checks are working in the next PR" >> $GITHUB_STEP_SUMMARY
          echo "3. Update CODEOWNERS file if needed with specific team/user assignments" >> $GITHUB_STEP_SUMMARY
          echo "4. Test the pull request workflow with the new templates" >> $GITHUB_STEP_SUMMARY

      - name: ‚úÖ Workflow completion
        run: |
          echo "üéâ Branch protection setup workflow completed!"
          echo "üìä Check the summary above for detailed results"
          echo "üõ°Ô∏è Your repository is now better protected with these enhancements"

  setup-branch-protection-skipped:
    name: üö´ Setup skipped (no admin or branch missing)
    runs-on: ubuntu-latest
    needs: precheck
    if: needs.precheck.outputs.has-admin != 'true' || needs.precheck.outputs.branch-exists != 'true'
    steps:
      - name: ‚ÑπÔ∏è Explain skip
        run: |
          echo "## üö´ Branch Protection Setup Skipped" >> $GITHUB_STEP_SUMMARY
          echo "- has-admin: ${{ needs.precheck.outputs.has-admin }}" >> $GITHUB_STEP_SUMMARY
          echo "- branch-exists: ${{ needs.precheck.outputs.branch-exists }}" >> $GITHUB_STEP_SUMMARY