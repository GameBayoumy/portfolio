name: Security Scan

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.17.0'
  CI: true
  FORCE_COLOR: 1

permissions:
  contents: read
  security-events: write
  statuses: write
  checks: write
  pull-requests: write

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --output=json > audit-report.json || true
          
          # Check if there are any vulnerabilities
          VULNERABILITIES=$(cat audit-report.json | jq '.vulnerabilities | length')
          
          if [ "$VULNERABILITIES" -gt 0 ]; then
            echo "⚠️ Found $VULNERABILITIES vulnerabilities"
            npm audit --audit-level=moderate
            exit 1
          else
            echo "✅ No vulnerabilities found"
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: always()
        with:
          name: npm-audit-report
          path: audit-report.json
          retention-days: 30

  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@cdb760004ba9ea4d525f2e043745dfe85bb9077e # master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Upload Snyk report
        uses: github/codeql-action/upload-sarif@e2b3eafc8d227b0241d48be5f425d47c2d750a13 # v3.26.10
        if: always()
        with:
          sarif_file: snyk.sarif

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@03ad356cddf65094c8b8e0d0e4f4fe5cbc20e16d # main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          license-checker --json --out licenses.json
          
          # Check for prohibited licenses
          PROHIBITED=$(cat licenses.json | jq -r 'to_entries[] | select(.value.licenses | contains("GPL") or contains("AGPL") or contains("LGPL")) | .key')
          
          if [ -n "$PROHIBITED" ]; then
            echo "❌ Prohibited licenses found:"
            echo "$PROHIBITED"
            exit 1
          else
            echo "✅ No prohibited licenses found"
          fi

      - name: Upload license report
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: license-report
          path: licenses.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, license-check]
    if: always()
    
    steps:
      - name: Create security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date**: $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Update security status
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          script: |
            const allPassed = '${{ needs.dependency-scan.result }}' === 'success' && 
                             '${{ needs.secret-scan.result }}' === 'success' && 
                             '${{ needs.license-check.result }}' === 'success';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: allPassed ? 'success' : 'failure',
              description: allPassed ? 'All security checks passed' : 'Security checks failed',
              context: 'security/scan'
            });