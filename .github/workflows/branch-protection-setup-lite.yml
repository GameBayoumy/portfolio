name: Branch Protection Setup - Lite

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch to protect (default: main)'
        required: false
        default: main
        type: string
      require_reviews:
        description: 'Number of required reviews'
        required: false
        default: '1'
        type: choice
        options: ['1', '2', '3']
      dismiss_stale_reviews:
        description: 'Dismiss stale reviews on push'
        required: false
        default: true
        type: boolean
      require_code_owner_reviews:
        description: 'Require code owner reviews'
        required: false
        default: false
        type: boolean
      enable_status_checks:
        description: 'Enable required status checks'
        required: false
        default: true
        type: boolean
  push:
    branches: [ main ]
    paths: [ .github/workflows/branch-protection-setup-lite.yml ]

permissions:
  actions: read
  contents: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  precheck:
    name: Precheck permissions and branch
    runs-on: ubuntu-latest
    outputs:
      has_admin: ${{ steps.check.outputs.has_admin }}
      branch_exists: ${{ steps.check.outputs.branch_exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check repo permissions and branch
        id: check
        shell: bash
        run: |
          set -euo pipefail
          BRANCH_NAME="${{ github.event.inputs.branch_name || 'main' }}"
          echo "branch: $BRANCH_NAME"

          REPO_INFO=$(curl -sSL -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }})
          HAS_ADMIN=$(echo "$REPO_INFO" | jq -r '.permissions.admin // false')
          echo "has_admin=$HAS_ADMIN" >> "$GITHUB_OUTPUT"

          # Branch check
          STATUS=$(curl -sSL -o /dev/null -w '%{http_code}' -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/branches/$BRANCH_NAME)
          if [[ "$STATUS" == "200" ]]; then
            echo "branch_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "branch_exists=false" >> "$GITHUB_OUTPUT"
          fi

  apply:
    name: Apply protection
    runs-on: ubuntu-latest
    needs: precheck
    if: needs.precheck.outputs.has_admin == 'true' && needs.precheck.outputs.branch_exists == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Apply protection rules
        id: protect
        shell: bash
        env:
          BRANCH_NAME: ${{ github.event.inputs.branch_name || 'main' }}
          REQUIRED_REVIEWS: ${{ github.event.inputs.require_reviews || '1' }}
          DISMISS_STALE: ${{ github.event.inputs.dismiss_stale_reviews || 'true' }}
          REQUIRE_CODE_OWNERS: ${{ github.event.inputs.require_code_owner_reviews || 'false' }}
          ENABLE_STATUS_CHECKS: ${{ github.event.inputs.enable_status_checks || 'true' }}
        run: |
          set -euo pipefail
          echo "Applying protection to $BRANCH_NAME"

          PROTECTION_CONFIG=$(jq -n \
            --argjson req_reviews "$REQUIRED_REVIEWS" \
            --argjson dismiss_stale "$DISMISS_STALE" \
            --argjson require_co "$REQUIRE_CODE_OWNERS" \
            --argjson enable_checks "$ENABLE_STATUS_CHECKS" \
            '{
              required_status_checks: ( $enable_checks == true ? {strict:true, contexts:["Code Quality","Type Check","Build Check"]} : null ),
              enforce_admins: false,
              required_pull_request_reviews: {
                required_approving_review_count: $req_reviews,
                dismiss_stale_reviews: $dismiss_stale,
                require_code_owner_reviews: $require_co,
                require_last_push_approval: false
              },
              restrictions: null,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true
            }')

          echo "$PROTECTION_CONFIG" | jq '.'

          RESP=$(curl -sS -w "\n%{http_code}" -X PUT \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --data "$PROTECTION_CONFIG" \
            https://api.github.com/repos/${{ github.repository }}/branches/$BRANCH_NAME/protection)
          BODY=$(echo "$RESP" | head -n -1)
          CODE=$(echo "$RESP" | tail -n1)
          echo "HTTP $CODE"
          echo "$BODY" | jq -r '.message // empty'
          if [[ "$CODE" != "200" && "$CODE" != "201" ]]; then
            echo "Protection application failed"
            exit 1
          fi

      - name: Summary
        if: always()
        run: |
          echo "## Branch protection applied" >> "$GITHUB_STEP_SUMMARY"
          echo "- Branch: ${{ github.event.inputs.branch_name || 'main' }}" >> "$GITHUB_STEP_SUMMARY"

  skipped:
    name: Skipped (no admin or branch missing)
    runs-on: ubuntu-latest
    needs: precheck
    if: needs.precheck.outputs.has_admin != 'true' || needs.precheck.outputs.branch_exists != 'true'
    steps:
      - name: Summary
        run: |
          echo "## Branch protection not applied" >> "$GITHUB_STEP_SUMMARY"
          echo "- has_admin: ${{ needs.precheck.outputs.has_admin }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- branch_exists: ${{ needs.precheck.outputs.branch_exists }}" >> "$GITHUB_STEP_SUMMARY"
