name: CI Pipeline (Optimized)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.17.0'
  NEXT_TELEMETRY_DISABLED: 1
  CI: true
  FORCE_COLOR: 1

permissions:
  contents: read
  security-events: write
  statuses: write
  checks: write
  pull-requests: write

jobs:
  # Job 1: Fast validation (runs first, fails fast)
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.setup.outputs.cache-hit }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0

      - name: Setup Node.js with caching
        id: setup
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          install-dependencies: 'true'

      - name: Quick lint and type check
        uses: ./.github/actions/build-and-test
        with:
          run-lint: 'true'
          run-type-check: 'true'
          run-tests: 'false'
          run-build: 'false'
          fail-fast: 'true'

  # Job 2: Build and test (runs in parallel after quick validation)
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: quick-validation
    outputs:
      build-cache-key: ${{ steps.build-cache.outputs.cache-primary-key }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js with caching
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          install-dependencies: ${{ needs.quick-validation.outputs.cache-hit != 'true' }}

      - name: Restore build cache
        id: build-cache
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          path: .next
          key: ${{ runner.os }}-nextjs-build-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-build-

      - name: Build and test
        uses: ./.github/actions/build-and-test
        with:
          run-lint: 'false'  # Already done in quick validation
          run-type-check: 'false'  # Already done in quick validation
          run-tests: 'true'
          run-build: 'true'
          fail-fast: 'true'

      - name: Upload build artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: build-artifacts-${{ github.run_id }}
          path: |
            .next/
            !.next/cache/
          retention-days: 1
          compression-level: 6
          if-no-files-found: error

  # Job 3: Security scanning (runs in parallel)
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: quick-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js with caching
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          install-dependencies: ${{ needs.quick-validation.outputs.cache-hit != 'true' }}

      - name: Run security audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=high --json > security-audit.json || true
          
          CRITICAL_VULNS=$(cat security-audit.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length')
          HIGH_VULNS=$(cat security-audit.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length')
          
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          echo "High vulnerabilities: $HIGH_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found!"
            npm audit --audit-level=critical
            exit 1
          elif [ "$HIGH_VULNS" -gt 5 ]; then
            echo "⚠️ Too many high vulnerabilities found!"
            npm audit --audit-level=high
            exit 1
          else
            echo "✅ Security audit passed"
          fi
        continue-on-error: false

      - name: CodeQL Analysis
        uses: github/codeql-action/init@e2b3eafc8d227b0241d48be5f425d47c2d750a13 # v3.26.10
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@e2b3eafc8d227b0241d48be5f425d47c2d750a13 # v3.26.10
        with:
          category: "/language:javascript"

      - name: Upload security results
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: always()
        with:
          name: security-results-${{ github.run_id }}
          path: security-audit.json
          retention-days: 30

  # Job 4: Performance testing (only on PRs, runs in parallel)
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [quick-validation, build-and-test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js with caching
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          install-dependencies: ${{ needs.quick-validation.outputs.cache-hit != 'true' }}

      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: build-artifacts-${{ github.run_id }}
          path: .next/

      - name: Bundle analysis
        run: |
          echo "Analyzing bundle size..."
          npm run analyze || echo "Bundle analysis not available"
          
          # Basic bundle size check
          if [ -d ".next/static" ]; then
            BUNDLE_SIZE=$(du -sh .next/static/chunks/*.js 2>/dev/null | head -1 | cut -f1 || echo "Unknown")
            echo "Bundle size: $BUNDLE_SIZE"
            
            # Simple size check (adjust threshold as needed)
            BUNDLE_SIZE_BYTES=$(du -b .next/static/chunks/*.js 2>/dev/null | head -1 | cut -f1 || echo "0")
            MAX_SIZE=2097152  # 2MB
            
            if [ "$BUNDLE_SIZE_BYTES" -gt "$MAX_SIZE" ]; then
              echo "⚠️ Bundle size exceeds threshold ($MAX_SIZE bytes)"
              echo "Current size: $BUNDLE_SIZE_BYTES bytes"
            else
              echo "✅ Bundle size within limits"
            fi
          fi
        continue-on-error: true

      - name: Upload performance artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        if: always()
        with:
          name: performance-analysis-${{ github.run_id }}
          path: |
            .next/analyze/
          retention-days: 7

  # Job 5: Final status check
  ci-complete:
    name: CI Pipeline Status
    runs-on: ubuntu-latest
    needs: [quick-validation, build-and-test, security-scan]
    if: always()
    
    steps:
      - name: Check overall status
        run: |
          echo "=== CI Pipeline Results ==="
          echo "Quick Validation: ${{ needs.quick-validation.result }}"
          echo "Build and Test: ${{ needs.build-and-test.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          
          # Check if all required jobs passed
          if [[ "${{ needs.quick-validation.result }}" == "success" && 
                "${{ needs.build-and-test.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            echo "CI_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ Some CI checks failed!"
            echo "CI_STATUS=failure" >> $GITHUB_ENV
            exit 1
          fi

      - name: Update commit status
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: process.env.CI_STATUS || 'failure',
              description: `CI Pipeline ${process.env.CI_STATUS || 'failed'}`,
              context: 'ci/optimized-pipeline'
            });

      - name: Create job summary
        if: always()
        run: |
          echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quick Validation | ${{ needs.quick-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Build and Test | ${{ needs.build-and-test.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status**: ${{ env.CI_STATUS == 'success' && '✅ SUCCESS' || '❌ FAILED' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Completed**: $(date -u)" >> $GITHUB_STEP_SUMMARY