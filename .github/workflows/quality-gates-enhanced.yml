name: üéØ Enhanced Quality Gates
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  quality-assessment:
    name: üéØ Quality Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      quality-score: ${{ steps.calculate.outputs.score }}
      quality-grade: ${{ steps.calculate.outputs.grade }}
      can-proceed: ${{ steps.calculate.outputs.can-proceed }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üèóÔ∏è Setup Node.js/Bun
        uses: ./.github/actions/setup-node
        with:
          node-version: "20.17.0"
          use-bun: 'true'
          install-dependencies: 'true'

      - name: üîç Code quality analysis
        id: quality
        run: |
          # ESLint analysis
          ESLINT_ERRORS=$(bun run lint 2>&1 | grep -c "error" || echo "0")
          ESLINT_WARNINGS=$(bun run lint 2>&1 | grep -c "warning" || echo "0")
          ESLINT_SCORE=$((100 - ESLINT_ERRORS * 10 - ESLINT_WARNINGS * 2))
          ESLINT_SCORE=$((ESLINT_SCORE > 0 ? ESLINT_SCORE : 0))
          echo "eslint-score=$ESLINT_SCORE" >> $GITHUB_OUTPUT
          
          # TypeScript analysis
          TS_ERRORS=$(bun run type-check 2>&1 | grep -c "error" || echo "0")
          TS_SCORE=$((100 - TS_ERRORS * 5))
          TS_SCORE=$((TS_SCORE > 0 ? TS_SCORE : 0))
          echo "ts-score=$TS_SCORE" >> $GITHUB_OUTPUT
          
          # Test coverage analysis (if available)
          if bun run test:coverage --silent 2>/dev/null; then
            COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct' 2>/dev/null || echo "75")
          else
            COVERAGE="75" # Default if no coverage
          fi
          echo "coverage-score=$COVERAGE" >> $GITHUB_OUTPUT
          
          # Security analysis
          SECURITY_ISSUES=$(bun audit 2>/dev/null | grep -c "vulnerabilities" || echo "0")
          SECURITY_SCORE=$((100 - SECURITY_ISSUES * 10))
          SECURITY_SCORE=$((SECURITY_SCORE > 0 ? SECURITY_SCORE : 0))
          echo "security-score=$SECURITY_SCORE" >> $GITHUB_OUTPUT

      - name: üìä Calculate quality score
        id: calculate
        run: |
          ESLINT_SCORE="${{ steps.quality.outputs.eslint-score }}"
          TS_SCORE="${{ steps.quality.outputs.ts-score }}"
          COVERAGE_SCORE="${{ steps.quality.outputs.coverage-score }}"
          SECURITY_SCORE="${{ steps.quality.outputs.security-score }}"
          
          # Weighted average calculation using awk for decimal arithmetic
          QUALITY_SCORE=$(awk "BEGIN {printf \"%.2f\", ($ESLINT_SCORE * 0.3 + $TS_SCORE * 0.3 + $COVERAGE_SCORE * 0.25 + $SECURITY_SCORE * 0.15)}")
          
          # Determine grade and can-proceed status
          if awk "BEGIN {exit !($QUALITY_SCORE >= 90)}"; then
            GRADE="A"
            CAN_PROCEED="true"
            STATUS="‚úÖ EXCELLENT"
          elif awk "BEGIN {exit !($QUALITY_SCORE >= 80)}"; then
            GRADE="B"
            CAN_PROCEED="true"
            STATUS="‚úÖ GOOD"
          elif awk "BEGIN {exit !($QUALITY_SCORE >= 70)}"; then
            GRADE="C"
            CAN_PROCEED="warning"
            STATUS="‚ö†Ô∏è ACCEPTABLE"
          else
            GRADE="D"
            CAN_PROCEED="false"
            STATUS="‚ùå NEEDS IMPROVEMENT"
          fi
          
          echo "score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
          echo "grade=$GRADE" >> $GITHUB_OUTPUT
          echo "can-proceed=$CAN_PROCEED" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          
          # Create detailed quality report
          cat > quality-report.md << EOF
          # üìä Enhanced Code Quality Report
          
          ## Overall Score: ${QUALITY_SCORE}/100 (Grade: ${GRADE})
          ### Status: ${STATUS}
          
          ### Detailed Metrics
          | Metric | Score | Weight | Contribution |
          |--------|-------|--------|-------------|
          | üîç **Code Style (ESLint)** | ${ESLINT_SCORE}/100 | 30% | $(awk "BEGIN {printf \"%.1f\", $ESLINT_SCORE * 0.3}") |
          | üéØ **Type Safety (TypeScript)** | ${TS_SCORE}/100 | 30% | $(awk "BEGIN {printf \"%.1f\", $TS_SCORE * 0.3}") |
          | üß™ **Test Coverage** | ${COVERAGE_SCORE}% | 25% | $(awk "BEGIN {printf \"%.1f\", $COVERAGE_SCORE * 0.25}") |
          | üõ°Ô∏è **Security** | ${SECURITY_SCORE}/100 | 15% | $(awk "BEGIN {printf \"%.1f\", $SECURITY_SCORE * 0.15}") |
          
          ### Quality Gate Status
          $(if [ "$CAN_PROCEED" = "true" ]; then 
            echo "‚úÖ **PASSED** - Quality gate requirements met"
          elif [ "$CAN_PROCEED" = "warning" ]; then 
            echo "‚ö†Ô∏è **WARNING** - Quality below recommended threshold (80+)"
          else 
            echo "‚ùå **FAILED** - Quality gate requirements not met (minimum 70)"
          fi)
          
          ### Recommendations
          $(if [ "$ESLINT_SCORE" -lt 80 ]; then echo "- üîç **Improve code style**: Address ESLint errors and warnings"; fi)
          $(if [ "$TS_SCORE" -lt 80 ]; then echo "- üéØ **Fix type issues**: Resolve TypeScript errors"; fi)
          $(if awk "BEGIN {exit !($COVERAGE_SCORE < 80)}"; then echo "- üß™ **Increase test coverage**: Add more comprehensive tests"; fi)
          $(if [ "$SECURITY_SCORE" -lt 80 ]; then echo "- üõ°Ô∏è **Address security**: Fix vulnerability issues"; fi)
          
          ---
          *Enhanced Quality Gates - Automated Code Quality Assessment*
          EOF

      - name: üí¨ Comment quality report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            // Find existing quality report comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const qualityComment = comments.data.find(comment => 
              comment.body.includes('Enhanced Code Quality Report')
            );
            
            if (qualityComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: qualityComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }

      - name: üè∑Ô∏è Add quality labels
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const grade = '${{ steps.calculate.outputs.grade }}';
            const score = parseFloat('${{ steps.calculate.outputs.score }}');
            
            // Remove existing quality labels
            const existingLabels = await github.rest.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const qualityLabels = existingLabels.data.filter(label => 
              label.name.startsWith('quality/')
            );
            
            for (const label of qualityLabels) {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: label.name
              });
            }
            
            // Add new quality label
            let qualityLabel = `quality/${grade.toLowerCase()}`;
            let labelColor = '28a745'; // Green
            
            if (grade === 'A') labelColor = '28a745'; // Green
            else if (grade === 'B') labelColor = 'fbca04'; // Yellow  
            else if (grade === 'C') labelColor = 'f66a0a'; // Orange
            else labelColor = 'd73a4a'; // Red
            
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: [qualityLabel]
            });

      - name: üö´ Block low quality code
        if: steps.calculate.outputs.can-proceed == 'false'
        run: |
          echo "‚ùå Code quality below minimum threshold"
          echo "Current score: ${{ steps.calculate.outputs.score }}/100 (Grade: ${{ steps.calculate.outputs.grade }})"
          echo "Minimum required: 70/100 (Grade: C)"
          echo ""
          echo "Please address the quality issues before proceeding."
          exit 1

      - name: ‚ö†Ô∏è Warning for moderate quality
        if: steps.calculate.outputs.can-proceed == 'warning'
        run: |
          echo "‚ö†Ô∏è Code quality below recommended threshold"
          echo "Current score: ${{ steps.calculate.outputs.score }}/100 (Grade: ${{ steps.calculate.outputs.grade }})"
          echo "Recommended: 80/100 (Grade: B)"
          echo ""
          echo "Consider improving quality before merging."