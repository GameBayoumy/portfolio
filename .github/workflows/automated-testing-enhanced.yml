name: 🧪 Enhanced Automated Testing

on:
  push:
    branches: [main, develop, beta, alpha]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      test_coverage_threshold:
        description: 'Minimum test coverage percentage'
        required: false
        default: '80'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22.x'
  BUN_VERSION: 'latest'
  FORCE_COLOR: 1
  CI: true

jobs:
  # Job 1: Setup and validation
  setup-validation:
    name: 🔍 Setup & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
      has-tests: ${{ steps.check-tests.outputs.has-tests }}
      has-lockfile: ${{ steps.check-lockfile.outputs.has-lockfile }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 📋 Check for test files
        id: check-tests
        run: |
          if find . -name "*.test.*" -o -name "*.spec.*" -o -name "__tests__" -type d | grep -q .; then
            echo "has-tests=true" >> $GITHUB_OUTPUT
            echo "✅ Test files found"
          else
            echo "has-tests=false" >> $GITHUB_OUTPUT
            echo "⚠️ No test files found - will skip test execution"
          fi

      - name: 📋 Check for lockfile
        id: check-lockfile
        run: |
          if [[ -f "bun.lock" || -f "bun.lockb" ]]; then
            echo "has-lockfile=true" >> $GITHUB_OUTPUT
            echo "✅ Bun lockfile found"
          elif [[ -f "package-lock.json" ]]; then
            echo "has-lockfile=true" >> $GITHUB_OUTPUT
            echo "✅ NPM lockfile found"
          else
            echo "has-lockfile=false" >> $GITHUB_OUTPUT
            echo "⚠️ No lockfile found - will generate during install"
          fi

      - name: 🔑 Generate cache keys
        id: cache-keys
        run: |
          PACKAGE_HASH="${{ hashFiles('package.json', 'bun.lock', 'bun.lockb', 'package-lock.json') }}"
          echo "cache-key=deps-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.BUN_VERSION }}-${PACKAGE_HASH}" >> $GITHUB_OUTPUT

  # Job 2: Dependency installation with fallback
  install-dependencies:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    needs: setup-validation
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: 🥟 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.npm/_cacache
            node_modules
            .next/cache
          key: ${{ needs.setup-validation.outputs.cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.BUN_VERSION }}-
            deps-${{ runner.os }}-${{ env.NODE_VERSION }}-
            deps-${{ runner.os }}-

      - name: � Install dependencies (Bun)
        id: bun-install
        continue-on-error: true
        run: |
          echo "🥟 Attempting Bun install..."
          if [[ "${{ needs.setup-validation.outputs.has-lockfile }}" == "true" ]]; then
            if [[ -f "bun.lock" || -f "bun.lockb" ]]; then
              bun install --frozen-lockfile --no-progress
            else
              echo "⚠️ Using npm lockfile; Bun will still install packages"
              bun install --no-progress
            fi
          else
            echo "⚠️ No lockfile found, installing without frozen flag"
            bun install --no-progress
          fi
          echo "install-success=true" >> $GITHUB_OUTPUT

      - name: 📥 Fallback to NPM install
        if: steps.bun-install.outputs.install-success != 'true'
        run: |
          echo "❌ Bun install failed, falling back to NPM..."
          npm ci --prefer-offline --no-audit --no-fund || npm install --prefer-offline --no-audit --no-fund

      - name: 🔍 Verify installation
        run: |
          echo "📊 Dependency verification:"
          node --version
          bun --version || echo "Bun not available"
          npm --version
          echo "📁 Node modules size:"
          du -sh node_modules 2>/dev/null || echo "node_modules not found"
          echo "📋 Package info:"
          cat package.json | jq -r '.name + " v" + .version'

  # Job 3: Linting and formatting
  code-quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    needs: [setup-validation, install-dependencies]
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🥟 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.npm/_cacache
            node_modules
            .next/cache
          key: ${{ needs.setup-validation.outputs.cache-key }}
          fail-on-cache-miss: true

    - name: 🎨 Run ESLint
        id: eslint
        continue-on-error: true
        run: |
      if command -v bun &> /dev/null; then
            echo "🥟 Running ESLint with Bun..."
            bun run lint 2>&1 | tee eslint-output.txt || true
          else
            echo "📦 Running ESLint with NPM..."
            npm run lint 2>&1 | tee eslint-output.txt || true
          fi
          
          if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
            echo "✅ ESLint passed"
            echo "eslint-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ ESLint found issues"
            echo "eslint-success=false" >> $GITHUB_OUTPUT
          fi

    - name: 💅 Check Prettier formatting
        id: prettier
        continue-on-error: true
        run: |
      if command -v bun &> /dev/null; then
            echo "🥟 Checking formatting with Bun..."
            bun run format:check 2>&1 | tee prettier-output.txt || true
          else
            echo "📦 Checking formatting with NPM..."
            npm run format:check 2>&1 | tee prettier-output.txt || true
          fi
          
          if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
            echo "✅ Prettier formatting is correct"
            echo "prettier-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Prettier found formatting issues"
            echo "prettier-success=false" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-results
          path: |
            eslint-output.txt
            prettier-output.txt
          retention-days: 7

      - name: 🚫 Fail if critical issues
        if: steps.eslint.outputs.eslint-success != 'true'
        run: |
          echo "❌ Critical code quality issues found"
          echo "Please fix ESLint errors before merging"
          exit 1

  # Job 4: Type checking
  type-check:
    name: 🔍 Type Check
    runs-on: ubuntu-latest
    needs: [setup-validation, install-dependencies]
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🥟 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.npm/_cacache
            node_modules
            .next/cache
          key: ${{ needs.setup-validation.outputs.cache-key }}
          fail-on-cache-miss: true

    - name: � Run TypeScript type check
        run: |
      if command -v bun &> /dev/null; then
            echo "🥟 Type checking with Bun..."
            bun run type-check
          else
            echo "📦 Type checking with NPM..."
            npm run type-check
          fi

  # Job 5: Unit tests
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [setup-validation, install-dependencies]
    timeout-minutes: 15
    if: needs.setup-validation.outputs.has-tests == 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🥟 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.npm/_cacache
            node_modules
            .next/cache
          key: ${{ needs.setup-validation.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: 🧪 Run unit tests
        id: unit-tests
        run: |
          # Set coverage threshold from input or default
          COVERAGE_THRESHOLD="${{ github.event.inputs.test_coverage_threshold || '80' }}"
          export COVERAGE_THRESHOLD
          
          if command -v bun &> /dev/null && npm run test --silent 2>/dev/null | grep -q "bun"; then
            echo "🥟 Running tests with Bun..."
            bun run test:coverage --passWithNoTests
          else
            echo "📦 Running tests with NPM..."
            npm run test:coverage -- --passWithNoTests
          fi

      - name: 📊 Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            test-results.xml
          retention-days: 30

      - name: 📈 Comment coverage on PR
        if: github.event_name == 'pull_request' && always()
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('coverage/coverage-summary.json')) {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              const comment = `## 📊 Test Coverage Report
              
              | Metric | Percentage | Status |
              |--------|------------|--------|
              | Lines | ${total.lines.pct}% | ${total.lines.pct >= 80 ? '✅' : '❌'} |
              | Functions | ${total.functions.pct}% | ${total.functions.pct >= 80 ? '✅' : '❌'} |
              | Branches | ${total.branches.pct}% | ${total.branches.pct >= 80 ? '✅' : '❌'} |
              | Statements | ${total.statements.pct}% | ${total.statements.pct >= 80 ? '✅' : '❌'} |
              
              **Overall Coverage:** ${total.lines.pct}% (Threshold: ${{ github.event.inputs.test_coverage_threshold || '80' }}%)`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Job 6: Build verification
  build-check:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    needs: [setup-validation, install-dependencies]
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🥟 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.npm/_cacache
            node_modules
            .next/cache
          key: ${{ needs.setup-validation.outputs.cache-key }}
          fail-on-cache-miss: true

    - name: 🏗️ Build project
        run: |
      if command -v bun &> /dev/null; then
            echo "🥟 Building with Bun..."
            bun run ci:build
          else
            echo "📦 Building with NPM..."
            npm run build
          fi

      - name: 📊 Build size analysis
        continue-on-error: true
        run: |
          if [[ -d ".next" ]]; then
            echo "📊 Build size analysis:"
            du -sh .next 2>/dev/null || echo "Could not analyze .next size"
            if [[ -f ".next/static/chunks" ]]; then
              echo "📦 Largest chunks:"
              find .next/static/chunks -name "*.js" -exec ls -lh {} \; | sort -k5 -hr | head -10 || echo "Could not analyze chunks"
            fi
          fi

      - name: 🔍 Check for build artifacts
        run: |
          echo "🔍 Checking build output..."
          if [[ -d ".next" ]]; then
            echo "✅ .next directory created"
            ls -la .next/ || echo "Could not list .next contents"
          else
            echo "❌ No .next directory found"
            exit 1
          fi

  # Job 7: Security audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: [setup-validation, install-dependencies]
    timeout-minutes: 10
    continue-on-error: true
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🥟 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.npm/_cacache
            node_modules
          key: ${{ needs.setup-validation.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: 🔒 Run security audit
        run: |
          echo "🔒 Running security audit..."
          if command -v bun &> /dev/null; then
            bun audit --format json > audit-results.json || true
            if [[ -s audit-results.json ]]; then
              cat audit-results.json | jq '.' || echo "No security issues found"
            else
              echo "✅ No security vulnerabilities found"
            fi
          else
            echo "⚠️ Bun not available for security audit"
            npm audit --audit-level=moderate || echo "NPM audit completed with warnings"
          fi

      - name: 📊 Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

  # Job 8: Final status check
  final-status:
    name: ✅ Final Status
    runs-on: ubuntu-latest
    needs: [code-quality, type-check, unit-tests, build-check, security-audit]
    if: always()
    timeout-minutes: 5
    steps:
      - name: 📋 Check job results
        run: |
          echo "📊 Job Results Summary:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Build Check: ${{ needs.build-check.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          
          # Check for any failures (excluding security audit which is continue-on-error)
          FAILED_JOBS=""
          [[ "${{ needs.code-quality.result }}" == "failure" ]] && FAILED_JOBS="${FAILED_JOBS}code-quality "
          [[ "${{ needs.type-check.result }}" == "failure" ]] && FAILED_JOBS="${FAILED_JOBS}type-check "
          [[ "${{ needs.unit-tests.result }}" == "failure" ]] && FAILED_JOBS="${FAILED_JOBS}unit-tests "
          [[ "${{ needs.build-check.result }}" == "failure" ]] && FAILED_JOBS="${FAILED_JOBS}build-check "
          
          if [[ -n "$FAILED_JOBS" ]]; then
            echo "❌ Failed jobs: $FAILED_JOBS"
            echo "Please check the failed job logs and fix the issues before merging."
            exit 1
          else
            echo "✅ All critical jobs passed successfully!"
          fi

      - name: 🎉 Success notification
        if: success()
        run: |
          echo "🎉 All tests and checks passed successfully!"
          echo "✅ Ready for deployment or merge"