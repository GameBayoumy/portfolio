name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '22.x'
  BUN_VERSION: 'latest'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  precheck:
    name: Precheck
    runs-on: ubuntu-latest
    outputs:
      has-secrets: ${{ steps.secrets.outputs.has_secrets }}
    steps:
      - name: Check Vercel secrets presence (no values logged)
        id: secrets
        shell: bash
        run: |
          HAS_TOKEN=false; HAS_ORG=false; HAS_PROJECT=false
          [[ -n "${{ secrets.VERCEL_TOKEN }}" ]] && HAS_TOKEN=true
          [[ -n "${{ secrets.VERCEL_ORG_ID }}" ]] && HAS_ORG=true
          [[ -n "${{ secrets.VERCEL_PROJECT_ID }}" ]] && HAS_PROJECT=true
          if [[ "$HAS_TOKEN" == true && "$HAS_ORG" == true && "$HAS_PROJECT" == true ]]; then
            echo "has_secrets=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_secrets=false" >> "$GITHUB_OUTPUT"
          fi
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Lint code
        run: |
          echo "Running ESLint check..."
          bun run lint || {
            echo "⚠️ Lint issues found, but continuing build"
            echo "Please fix lint issues in a follow-up PR"
          }
        continue-on-error: true

      - name: Type check
        run: |
          echo "Running TypeScript check..."
          bun run type-check || {
            echo "⚠️ TypeScript issues found, but continuing build"
            echo "Please fix type issues in a follow-up PR"
          }
        continue-on-error: true

      - name: Build application
        run: bun run build

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: .next/
          retention-days: 1
          include-hidden-files: true

  deploy_preview:
    name: Deploy Preview
    needs: [precheck, build_and_test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.precheck.outputs.has-secrets == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Vercel CLI
        run: bun add -g vercel@latest

      - name: Deploy to Vercel
        id: deploy
        run: |
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Preview deployed at: ${{ steps.deploy.outputs.url }}'
            })

  deploy_preview_skipped:
    name: Deploy Preview (skipped)
    needs: [precheck, build_and_test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && needs.precheck.outputs.has-secrets != 'true'
    steps:
      - name: Skip notice
        run: |
          echo "Skipping preview deploy: missing one or more Vercel secrets (VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID)."

  deploy_production:
    name: Deploy Production
    needs: [precheck, build_and_test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.precheck.outputs.has-secrets == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Install Vercel CLI
        run: bun add -g vercel@latest

      - name: Deploy to Vercel
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy_production_skipped:
    name: Deploy Production (skipped)
    needs: [precheck, build_and_test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.precheck.outputs.has-secrets != 'true'
    steps:
      - name: Skip notice
        run: |
          echo "Skipping production deploy: missing one or more Vercel secrets (VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID)."