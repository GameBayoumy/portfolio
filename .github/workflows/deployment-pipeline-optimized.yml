name: 🚀 Optimized Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'preview'
        type: choice
        options: ['preview', 'staging', 'production']
      skip_tests:
        description: 'Skip test execution (emergency only)'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even with warnings'
        required: false
        default: false
        type: boolean

concurrency:
  group: deploy-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  NODE_VERSION: '22.x'
  BUN_VERSION: 'latest'
  FORCE_COLOR: 1
  CI: true
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: Pre-deployment validation
  pre-deployment-validation:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      deployment-environment: ${{ steps.validation.outputs.deployment-environment }}
      skip-tests: ${{ steps.validation.outputs.skip-tests }}
      cache-key: ${{ steps.cache-setup.outputs.cache-key }}
      has-secrets: ${{ steps.secrets-check.outputs.has-secrets }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔑 Check deployment secrets
        id: secrets-check
        run: |
          echo "🔑 Validating deployment secrets..."
          
          HAS_VERCEL_TOKEN=false
          HAS_VERCEL_ORG=false
          HAS_VERCEL_PROJECT=false
          
          [[ -n "${{ secrets.VERCEL_TOKEN }}" ]] && HAS_VERCEL_TOKEN=true
          [[ -n "${{ secrets.VERCEL_ORG_ID }}" ]] && HAS_VERCEL_ORG=true
          [[ -n "${{ secrets.VERCEL_PROJECT_ID }}" ]] && HAS_VERCEL_PROJECT=true
          
          echo "Vercel Token: $([[ "$HAS_VERCEL_TOKEN" == "true" ]] && echo "✅" || echo "❌")"
          echo "Vercel Org ID: $([[ "$HAS_VERCEL_ORG" == "true" ]] && echo "✅" || echo "❌")"
          echo "Vercel Project ID: $([[ "$HAS_VERCEL_PROJECT" == "true" ]] && echo "✅" || echo "❌")"
          
          if [[ "$HAS_VERCEL_TOKEN" == "true" && "$HAS_VERCEL_ORG" == "true" && "$HAS_VERCEL_PROJECT" == "true" ]]; then
            echo "has-secrets=true" >> $GITHUB_OUTPUT
            echo "✅ All required secrets are configured"
          else
            echo "has-secrets=false" >> $GITHUB_OUTPUT
            echo "⚠️ Missing required Vercel deployment secrets"
          fi

      - name: 🎯 Determine deployment strategy
        id: validation
        run: |
          echo "🎯 Determining deployment strategy..."
          
          # Determine environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            SKIP_TESTS="${{ github.event.inputs.skip_tests }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            ENVIRONMENT="production"
            SKIP_TESTS="false"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ENVIRONMENT="preview"
            SKIP_TESTS="false"
          else
            ENVIRONMENT="preview"
            SKIP_TESTS="false"
          fi
          
          echo "deployment-environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "skip-tests=$SKIP_TESTS" >> $GITHUB_OUTPUT
          echo "🌍 Deployment Environment: $ENVIRONMENT"
          echo "🧪 Skip Tests: $SKIP_TESTS"
          
          # Determine if we should deploy
          SHOULD_DEPLOY=true
          
          # Check if secrets are available for Vercel deployment
          if [[ "${{ steps.secrets-check.outputs.has-secrets }}" != "true" ]]; then
            echo "⚠️ Cannot deploy to Vercel - missing secrets"
            echo "📝 Will build only (no deployment)"
            SHOULD_DEPLOY="false"
          fi
          
          # Check for deployment skip markers
          if git log -1 --pretty=%B | grep -i "\[skip deploy\]\|\[no deploy\]"; then
            echo "⏭️ Deployment skipped due to commit message"
            SHOULD_DEPLOY="false"
          fi
          
          echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "🚀 Should Deploy: $SHOULD_DEPLOY"

      - name: 🔑 Setup cache keys
        id: cache-setup
        run: |
          PACKAGE_HASH="${{ hashFiles('package.json', 'bun.lock', 'bun.lockb', 'package-lock.json') }}"
          CACHE_KEY="deployment-deps-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.BUN_VERSION }}-${PACKAGE_HASH}"
          echo "cache-key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "🔑 Cache key: $CACHE_KEY"

  # Job 2: Optimized build and test
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    timeout-minutes: 20
    if: needs.pre-deployment-validation.outputs.skip-tests != 'true'
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: 🥟 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Cache dependencies and build
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.npm/_cacache
            node_modules
            .next/cache
          key: ${{ needs.pre-deployment-validation.outputs.cache-key }}
          restore-keys: |
            deployment-deps-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ env.BUN_VERSION }}-
            deployment-deps-${{ runner.os }}-${{ env.NODE_VERSION }}-
            deployment-deps-${{ runner.os }}-

      - name: 📥 Install dependencies
        run: |
          echo "📥 Installing dependencies with Bun..."
            if [[ -f "bun.lock" || -f "bun.lockb" ]]; then
            bun install --frozen-lockfile --no-progress
          else
            echo "⚠️ No Bun lockfile found, installing without frozen flag"
            bun install --no-progress
          fi

      - name: 🎨 Lint and format check
        id: lint-check
        continue-on-error: true
        run: |
          echo "🎨 Running lint and format checks..."
          
          # Run ESLint
          if bun run lint; then
            echo "✅ ESLint passed"
            echo "lint-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ ESLint failed"
            echo "lint-success=false" >> $GITHUB_OUTPUT
          fi
          
          # Check Prettier formatting
          if bun run format:check; then
            echo "✅ Prettier formatting correct"
            echo "format-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Prettier formatting issues found"
            echo "format-success=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Type checking
        id: type-check
        continue-on-error: true
        run: |
          echo "🔍 Running TypeScript type checking..."
          if bun run type-check; then
            echo "✅ Type checking passed"
            echo "type-check-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Type checking failed"
            echo "type-check-success=false" >> $GITHUB_OUTPUT
          fi

      - name: 🧪 Run tests
        id: run-tests
        continue-on-error: true
        run: |
          echo "🧪 Running test suite..."
          
          # Check if test files exist
          if find . -name "*.test.*" -o -name "*.spec.*" | grep -q .; then
            echo "📝 Test files found, running tests..."
            if bun run test:coverage --passWithNoTests; then
              echo "✅ Tests passed"
              echo "tests-success=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Tests failed"
              echo "tests-success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No test files found, skipping test execution"
            echo "tests-success=true" >> $GITHUB_OUTPUT
          fi

      - name: 🏗️ Build project
        id: build
        run: |
          echo "🏗️ Building project..."
          
          # Set environment variables for build
          export NODE_ENV=production
          
          if bun run build; then
            echo "✅ Build successful"
            echo "build-success=true" >> $GITHUB_OUTPUT
            
            # Analyze build output
            if [[ -d ".next" ]]; then
              echo "📊 Build analysis:"
              du -sh .next 2>/dev/null || echo "Could not analyze build size"
              
              # Check for critical build files
              if [[ -f ".next/BUILD_ID" ]]; then
                BUILD_ID=$(cat .next/BUILD_ID)
                echo "🆔 Build ID: $BUILD_ID"
                echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "❌ Build failed"
            echo "build-success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 📊 Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            .next/
            coverage/
          retention-days: 3

      - name: 🚫 Check for blocking issues
        run: |
          echo "🚫 Checking for deployment-blocking issues..."
          
          BLOCKING_ISSUES=""
          
          # Critical failures that should block deployment
          [[ "${{ steps.build.outputs.build-success }}" != "true" ]] && BLOCKING_ISSUES="${BLOCKING_ISSUES}build "
          [[ "${{ steps.type-check.outputs.type-check-success }}" != "true" ]] && BLOCKING_ISSUES="${BLOCKING_ISSUES}typescript "
          
          # Non-critical but logged warnings
          WARNING_ISSUES=""
          [[ "${{ steps.lint-check.outputs.lint-success }}" != "true" ]] && WARNING_ISSUES="${WARNING_ISSUES}linting "
          [[ "${{ steps.lint-check.outputs.format-success }}" != "true" ]] && WARNING_ISSUES="${WARNING_ISSUES}formatting "
          [[ "${{ steps.run-tests.outputs.tests-success }}" != "true" ]] && WARNING_ISSUES="${WARNING_ISSUES}tests "
          
          if [[ -n "$BLOCKING_ISSUES" ]]; then
            echo "❌ Deployment blocked by critical issues: $BLOCKING_ISSUES"
            echo "Please fix these issues before deploying."
            exit 1
          fi
          
          if [[ -n "$WARNING_ISSUES" ]]; then
            echo "⚠️ Deployment proceeding with warnings: $WARNING_ISSUES"
            echo "Consider fixing these issues in a follow-up PR."
          else
            echo "✅ No blocking issues found - ready for deployment!"
          fi

  # Job 3: Deployment to Vercel
  deploy-to-vercel:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-and-test]
    if: |
      always() &&
      needs.pre-deployment-validation.outputs.has-secrets == 'true' &&
      needs.pre-deployment-validation.outputs.should-deploy == 'true' &&
      (needs.build-and-test.result == 'success' ||
       needs.pre-deployment-validation.outputs.skip-tests == 'true' ||
       github.event.inputs.force_deploy == 'true')
    timeout-minutes: 15
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
      deployment-success: ${{ steps.deploy.outputs.deployment-success }}
      verification-success: ${{ steps.verify.outputs.verification-success }}
    environment:
      name: ${{ needs.pre-deployment-validation.outputs.deployment-environment }}
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🥟 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install Vercel CLI
        run: bun add -g vercel@46

      - name: 🔐 Export Vercel token
        run: echo "VERCEL_TOKEN is set"
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: 🔗 Link to Vercel project
        run: |
          echo "🔗 Linking to Vercel project..."
          vercel link --yes --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Vercel
        id: deploy
        run: |
          ENV="${{ needs.pre-deployment-validation.outputs.deployment-environment }}"
          echo "🚀 Deploying to Vercel ($ENV environment)..."
          
          # Set deployment flags based on environment
          DEPLOY_FLAGS=""
          case "$ENV" in
            "production")
              DEPLOY_FLAGS="--prod"
              ;;
            "staging")
              DEPLOY_FLAGS="--target staging"
              ;;
            "preview")
              DEPLOY_FLAGS=""
              ;;
          esac
          
          # Deploy with appropriate flags
          if [[ "$ENV" == "production" ]]; then
            echo "🏭 Production deployment"
            DEPLOYMENT_URL=$(vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            echo "🔍 Preview/staging deployment"
            DEPLOYMENT_URL=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
          fi
          
          if [[ -n "$DEPLOYMENT_URL" ]]; then
            echo "✅ Deployment successful!"
            echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "🔗 Deployment URL: $DEPLOYMENT_URL"
            
            # Set deployment status
            echo "deployment-success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Deployment failed - no URL returned"
            echo "deployment-success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 🔍 Verify deployment
        id: verify
        continue-on-error: true
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"
          echo "🔍 Verifying deployment at: $DEPLOYMENT_URL"
          
          if [[ -z "$DEPLOYMENT_URL" ]]; then
            echo "❌ No deployment URL to verify"
            echo "verification-success=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Wait for deployment to be ready
          echo "⏳ Waiting for deployment to be ready..."
          sleep 30
          
          # Test deployment with retries
          MAX_RETRIES=5
          RETRY_DELAY=10
          SUCCESS=false
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "🔄 Verification attempt $i/$MAX_RETRIES"
            
            if curl -f -s -m 30 "$DEPLOYMENT_URL" > /dev/null; then
              echo "✅ Deployment is responding correctly"
              SUCCESS=true
              break
            else
              echo "❌ Attempt $i failed"
              [[ $i -lt $MAX_RETRIES ]] && sleep $RETRY_DELAY
            fi
          done
          
          if [[ "$SUCCESS" == "true" ]]; then
            echo "verification-success=true" >> $GITHUB_OUTPUT
            echo "✅ Deployment verification passed"
          else
            echo "verification-success=false" >> $GITHUB_OUTPUT
            echo "❌ Deployment verification failed after $MAX_RETRIES attempts"
          fi

      - name: 📝 Comment on PR with deployment info
        if: github.event_name == 'pull_request' && steps.deploy.outputs.deployment-success == 'true'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment-url }}';
            const environment = '${{ needs.pre-deployment-validation.outputs.deployment-environment }}';
            const verificationSuccess = '${{ steps.verify.outputs.verification-success }}';
            
            const comment = `## 🚀 Deployment Status
            
            **Environment:** ${environment}
            **Status:** ${verificationSuccess === 'true' ? '✅ Successful' : '⚠️ Deployed (verification pending)'}
            **URL:** ${deploymentUrl}
            
            ### 🔗 Preview Links
            - **Live Site:** [${deploymentUrl}](${deploymentUrl})
            - **Vercel Dashboard:** [View Deployment](https://vercel.com/dashboard)
            
            ${verificationSuccess === 'true' ? 
              '✅ Deployment verified and ready for testing!' : 
              '⚠️ Deployment completed but verification is pending. Please test manually.'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 3b: Explicit skipped notice when deployment cannot run
  deploy-skipped:
    name: 🚫 Deploy skipped
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-and-test]
    if: |
      always() && (
        needs.pre-deployment-validation.outputs.should-deploy != 'true' ||
        needs.pre-deployment-validation.outputs.has-secrets != 'true'
      )
    steps:
      - name: ℹ️ Explain why deployment skipped
        run: |
          echo "Deployment skipped. Reasons:"
          echo "- has-secrets: ${{ needs.pre-deployment-validation.outputs.has-secrets }}"
          echo "- should-deploy: ${{ needs.pre-deployment-validation.outputs.should-deploy }}"
          echo "- build-and-test result: ${{ needs.build-and-test.result }}"
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚫 Deployment Skipped" >> $GITHUB_STEP_SUMMARY
          echo "- has-secrets: ${{ needs.pre-deployment-validation.outputs.has-secrets }}" >> $GITHUB_STEP_SUMMARY
          echo "- should-deploy: ${{ needs.pre-deployment-validation.outputs.should-deploy }}" >> $GITHUB_STEP_SUMMARY
          echo "- build-and-test: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY

  # Job 4: Post-deployment monitoring
  post-deployment-monitoring:
    name: 📊 Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, deploy-to-vercel]
    if: always() && needs.deploy-to-vercel.outputs.deployment-success == 'true'
    timeout-minutes: 10
    steps:
      - name: 📊 Trigger monitoring workflow
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ needs.deploy-to-vercel.outputs.deployment-url }}';
            const environment = '${{ needs.pre-deployment-validation.outputs.deployment-environment }}';
            
            // Trigger the monitoring workflow
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deployment-monitoring.yml',
              ref: context.ref,
              inputs: {
                environment: environment,
                check_type: 'health',
                notify_on_failure: 'true'
              }
            });
            
            console.log(`✅ Triggered post-deployment monitoring for ${environment} environment`);

      - name: 🎉 Deployment success summary
        run: |
          echo "## 🎉 Deployment Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.pre-deployment-validation.outputs.deployment-environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ needs.deploy-to-vercel.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Verification:** ${{ needs.deploy-to-vercel.outputs.verification-success == 'true' && '✅ Passed' || '⚠️ Pending' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [🌐 Live Site](${{ needs.deploy-to-vercel.outputs.deployment-url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📊 Vercel Dashboard](https://vercel.com/dashboard)" >> $GITHUB_STEP_SUMMARY
          echo "- [📈 Monitoring Results](../actions)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Deployment pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY

  # Job 5: Deployment status summary
  deployment-status:
    name: 📋 Deployment Status
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, build-and-test, deploy-to-vercel, deploy-skipped, post-deployment-monitoring]
    if: always()
    timeout-minutes: 5
    steps:
      - name: 📋 Final status check
        run: |
          echo "📊 Deployment Pipeline Summary:"
          echo "Pre-deployment: ${{ needs.pre-deployment-validation.result }}"
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          echo "Deploy to Vercel: ${{ needs.deploy-to-vercel.result }} (skipped job ran: ${{ needs.deploy-skipped.result }})"
          echo "Post-deployment: ${{ needs.post-deployment-monitoring.result }}"

          # Check for critical failures
          FAILED_JOBS=""
          if [[ "${{ needs.pre-deployment-validation.result }}" == "failure" ]]; then
            FAILED_JOBS="${FAILED_JOBS}pre-deployment "
          fi
          if [[ "${{ needs.build-and-test.result }}" == "failure" && "${{ needs.pre-deployment-validation.outputs.skip-tests }}" != "true" ]]; then
            FAILED_JOBS="${FAILED_JOBS}build-test "
          fi
          if [[ "${{ needs.deploy-to-vercel.result }}" == "failure" && "${{ needs.pre-deployment-validation.outputs.should-deploy }}" == "true" && "${{ needs.pre-deployment-validation.outputs.has-secrets }}" == "true" ]]; then
            FAILED_JOBS="${FAILED_JOBS}deployment "
          fi

          if [[ -n "$FAILED_JOBS" ]]; then
            echo "❌ Pipeline failed in: $FAILED_JOBS"
            echo "Check the failed job logs for details."
            exit 1
          else
            echo "✅ Deployment pipeline completed successfully!"
            if [[ "${{ needs.pre-deployment-validation.outputs.should-deploy }}" == "true" ]]; then
              echo "🚀 Application deployed successfully!"
            else
              echo "🏗️ Build completed (no deployment)"
            fi
          fi