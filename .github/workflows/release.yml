name: 🚀 Release Management

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - patch
        - minor
        - major
        - dry-run
      prerelease:
        description: 'Create prerelease'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Validate commits and run tests
  validate:
    name: 🔍 Validate & Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📝 Validate commit messages
        if: github.event_name == 'pull_request'
        run: |
          npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: 🧪 Run tests
        run: |
          npm run lint
          npm run type-check
          npm run test
          npm run build

      - name: 🔍 Security audit
        run: npm audit --audit-level=moderate

      - name: 📊 Generate test coverage
        run: npm run test:coverage

      - name: 📤 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Automated semantic release
  release:
    name: 🚀 Semantic Release
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      released: ${{ steps.semantic.outputs.released }}
      version: ${{ steps.semantic.outputs.version }}
      major: ${{ steps.semantic.outputs.major }}
      minor: ${{ steps.semantic.outputs.minor }}
      patch: ${{ steps.semantic.outputs.patch }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎯 Semantic Release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx semantic-release --debug
          echo "released=$(jq -r .released < .semantic-release-output.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r .version < .semantic-release-output.json)" >> $GITHUB_OUTPUT
          echo "major=$(jq -r .major < .semantic-release-output.json)" >> $GITHUB_OUTPUT
          echo "minor=$(jq -r .minor < .semantic-release-output.json)" >> $GITHUB_OUTPUT
          echo "patch=$(jq -r .patch < .semantic-release-output.json)" >> $GITHUB_OUTPUT

  # Manual release workflow
  manual-release:
    name: 📋 Manual Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run pre-release tests
        run: |
          npm run lint
          npm run type-check
          npm run test
          npm run build

      - name: 🎯 Manual Release - Dry Run
        if: github.event.inputs.release_type == 'dry-run'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --dry-run --debug

      - name: 🎯 Manual Release - Auto
        if: github.event.inputs.release_type == 'auto'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release --debug

      - name: 🎯 Manual Release - Specific Version
        if: contains(fromJson('["patch", "minor", "major"]'), github.event.inputs.release_type)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          npx standard-version --release-as ${{ github.event.inputs.release_type }}
          git push --follow-tags origin main

  # Deploy to Vercel after successful release
  deploy:
    name: 🌐 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.released == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Update deployment status
        run: |
          echo "✅ Successfully deployed version ${{ needs.release.outputs.version }} to production"

  # Performance monitoring after deployment
  performance-check:
    name: 📈 Performance Check
    runs-on: ubuntu-latest
    needs: [release, deploy]
    if: needs.release.outputs.released == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🚀 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📊 Performance regression check
        run: |
          echo "Running performance regression tests..."
          npm run test:performance || true

  # Notification workflow
  notify:
    name: 📢 Release Notifications
    runs-on: ubuntu-latest
    needs: [release, deploy, performance-check]
    if: always() && needs.release.outputs.released == 'true'
    
    steps:
      - name: 📧 Notify team of successful release
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Successfully released version ${{ needs.release.outputs.version }}"
          echo "🚀 Deployed to production: https://your-domain.vercel.app"
          echo "📝 Release notes: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.release.outputs.version }}"

      - name: 🚨 Notify team of deployment failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed for version ${{ needs.release.outputs.version }}"
          echo "🔍 Check deployment logs and consider rollback if necessary"

      - name: 📊 Post performance results
        if: needs.performance-check.result == 'success'
        run: |
          echo "✅ Performance checks passed for version ${{ needs.release.outputs.version }}"

  # Rollback workflow (manual trigger)
  rollback:
    name: ⏪ Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'rollback'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⏪ Rollback to previous version
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          echo "Rolling back to $PREVIOUS_TAG"
          git checkout $PREVIOUS_TAG
          
      - name: 🚀 Deploy rollback version
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📢 Notify rollback completion
        run: |
          echo "⏪ Successfully rolled back to previous version"
          echo "🔍 Please investigate and fix the issues before next release"