name: Reusable Deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Deployment environment (preview, production)'
      node-version:
        required: false
        type: string
        default: '18.17.0'
        description: 'Node.js version to use'
      timeout-minutes:
        required: false
        type: number
        default: 15
        description: 'Timeout for deployment in minutes'
      max-retries:
        required: false
        type: number
        default: 3
        description: 'Maximum number of retry attempts'
    secrets:
      VERCEL_TOKEN:
        required: true
      VERCEL_ORG_ID:
        required: true
      VERCEL_PROJECT_ID:
        required: true
    outputs:
      deployment-url:
        description: 'The deployed application URL'
        value: ${{ jobs.deploy.outputs.deployment-url }}
      deployment-status:
        description: 'Status of the deployment'
        value: ${{ jobs.deploy.outputs.deployment-status }}

permissions:
  contents: read
  deployments: write
  statuses: write
  pull-requests: write

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
      deployment-status: ${{ steps.deploy.outputs.deployment-status }}
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Node.js with caching
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install Vercel CLI with retry
        run: |
          for i in {1..${{ inputs.max-retries }}}; do
            echo "Attempt $i: Installing Vercel CLI..."
            if npm install --global vercel@latest; then
              echo "✅ Vercel CLI installed successfully"
              break
            else
              echo "❌ Installation failed, attempt $i/${{ inputs.max-retries }}"
              if [ $i -eq ${{ inputs.max-retries }} ]; then
                echo "Maximum retries reached, failing..."
                exit 1
              fi
              sleep $((i * 5))  # Exponential backoff
            fi
          done
        timeout-minutes: 10

      - name: Pull Vercel Environment
        run: |
          for i in {1..${{ inputs.max-retries }}}; do
            echo "Attempt $i: Pulling Vercel environment..."
            if vercel pull --yes --environment=${{ inputs.environment }} --token=${{ secrets.VERCEL_TOKEN }}; then
              echo "✅ Environment pulled successfully"
              break
            else
              echo "❌ Pull failed, attempt $i/${{ inputs.max-retries }}"
              if [ $i -eq ${{ inputs.max-retries }} ]; then
                echo "Maximum retries reached, failing..."
                exit 1
              fi
              sleep $((i * 10))  # Exponential backoff
            fi
          done
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        timeout-minutes: 15

      - name: Build Project
        run: |
          echo "Building for ${{ inputs.environment }}..."
          BUILD_FLAGS=""
          if [ "${{ inputs.environment }}" = "production" ]; then
            BUILD_FLAGS="--prod"
          fi
          
          for i in {1..${{ inputs.max-retries }}}; do
            echo "Attempt $i: Building project..."
            if vercel build $BUILD_FLAGS --token=${{ secrets.VERCEL_TOKEN }}; then
              echo "✅ Build completed successfully"
              break
            else
              echo "❌ Build failed, attempt $i/${{ inputs.max-retries }}"
              if [ $i -eq ${{ inputs.max-retries }} ]; then
                echo "Maximum retries reached, failing..."
                exit 1
              fi
              sleep $((i * 15))  # Exponential backoff
            fi
          done
        env:
          NODE_ENV: production
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        timeout-minutes: 20

      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOY_FLAGS="--prebuilt"
          if [ "${{ inputs.environment }}" = "production" ]; then
            DEPLOY_FLAGS="$DEPLOY_FLAGS --prod"
          fi
          
          for i in {1..${{ inputs.max-retries }}}; do
            echo "Attempt $i: Deploying to Vercel..."
            if DEPLOYMENT_URL=$(vercel deploy $DEPLOY_FLAGS --token=${{ secrets.VERCEL_TOKEN }}); then
              echo "✅ Deployment successful!"
              echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
              echo "deployment-status=success" >> $GITHUB_OUTPUT
              echo "Deployment URL: $DEPLOYMENT_URL"
              break
            else
              echo "❌ Deployment failed, attempt $i/${{ inputs.max-retries }}"
              if [ $i -eq ${{ inputs.max-retries }} ]; then
                echo "Maximum retries reached, failing..."
                echo "deployment-status=failure" >> $GITHUB_OUTPUT
                exit 1
              fi
              sleep $((i * 20))  # Exponential backoff
            fi
          done
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        timeout-minutes: 15

      - name: Health Check
        if: steps.deploy.outputs.deployment-url
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.deployment-url }}"
          echo "Performing health check on: $DEPLOYMENT_URL"
          
          # Wait for deployment to be ready
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Health check passed (HTTP $HTTP_CODE)"
              break
            else
              echo "⚠️ Health check returned HTTP $HTTP_CODE"
              if [ $i -eq 5 ]; then
                echo "❌ Health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
        timeout-minutes: 5

      - name: Create deployment summary
        if: always()
        run: |
          STATUS="${{ steps.deploy.outputs.deployment-status }}"
          URL="${{ steps.deploy.outputs.deployment-url }}"
          
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${STATUS:-'failed'}" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$URL" ]; then
            echo "**URL**: [$URL]($URL)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Deployed at**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Node.js version**: ${{ inputs.node-version }}" >> $GITHUB_STEP_SUMMARY