name: 'Setup Node.js and Bun with Optimized Caching'
description: 'Sets up Node.js and Bun with intelligent caching and dependency management'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20.x'
  bun-version:
    description: 'Bun version to use'
    required: false
    default: 'latest'
  use-bun:
    description: 'Whether to use Bun as the package manager'
    required: false
    default: 'true'
  install-dependencies:
    description: 'Whether to install dependencies'
    required: false
    default: 'true'
  cache-dependency-path:
    description: 'Path to dependency files for caching'
    required: false
    default: 'bun.lockb'

outputs:
  cache-hit:
    description: 'Whether dependencies were restored from cache'
    value: ${{ steps.cache-deps.outputs.cache-hit }}
  node-version:
    description: 'Actual Node.js version installed'
    value: ${{ steps.setup-node.outputs.node-version }}
  bun-version:
    description: 'Actual Bun version installed'  
    value: ${{ steps.setup-bun.outputs.bun-version }}

runs:
  using: composite
  steps:
    - name: 🏗️ Setup Node.js
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        check-latest: true

    - name: 🚀 Setup Bun
      id: setup-bun
      if: inputs.use-bun == 'true'
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: ${{ inputs.bun-version }}

    - name: 🔍 Generate cache key
      id: cache-key
      shell: bash
      run: |
        if [ "${{ inputs.use-bun }}" = "true" ]; then
          echo "cache-key=${{ runner.os }}-bun-${{ hashFiles(inputs.cache-dependency-path, 'package.json') }}" >> $GITHUB_OUTPUT
          echo "cache-path=~/.bun/install/cache" >> $GITHUB_OUTPUT
        else
          echo "cache-key=${{ runner.os }}-node-${{ hashFiles('package-lock.json', 'package.json') }}" >> $GITHUB_OUTPUT
          echo "cache-path=~/.npm" >> $GITHUB_OUTPUT
        fi

    - name: 📦 Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: ${{ steps.cache-key.outputs.cache-path }}
        key: ${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-${{ inputs.use-bun == 'true' && 'bun' || 'node' }}-

    - name: 📋 Install dependencies with Bun
      if: inputs.install-dependencies == 'true' && inputs.use-bun == 'true' && steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "🔄 Installing dependencies with Bun..."
        bun install --frozen-lockfile --production=false
        echo "✅ Dependencies installed successfully"

    - name: 📋 Install dependencies with npm
      if: inputs.install-dependencies == 'true' && inputs.use-bun != 'true' && steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "🔄 Installing dependencies with npm..."
        npm ci --prefer-offline --no-audit
        echo "✅ Dependencies installed successfully"

    - name: 📊 Cache statistics
      if: inputs.install-dependencies == 'true'
      shell: bash
      run: |
        if [ "${{ steps.cache-deps.outputs.cache-hit }}" = "true" ]; then
          echo "✅ Dependencies restored from cache"
        else
          echo "📦 Dependencies installed fresh"
        fi
        
        # Show package manager info
        if [ "${{ inputs.use-bun }}" = "true" ]; then
          echo "Package Manager: Bun $(bun --version)"
        else
          echo "Package Manager: npm $(npm --version)"
        fi
        
        echo "Node.js: $(node --version)"

    - name: 🔧 Setup package manager globals
      if: inputs.use-bun == 'true'
      shell: bash
      run: |
        # Ensure Bun globals are in PATH
        echo "$HOME/.bun/bin" >> $GITHUB_PATH
        
        # Set Bun environment variables for optimal performance
        echo "BUN_RUNTIME=bun" >> $GITHUB_ENV
        echo "BUN_INSTALL=$HOME/.bun" >> $GITHUB_ENV
        echo "NODE_ENV=production" >> $GITHUB_ENV