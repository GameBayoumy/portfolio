name: 'Setup Node.js with Caching'
description: 'Set up Node.js with optimized caching for dependencies and build artifacts'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18.17.0'
  cache-dependency-path:
    description: 'Path to package-lock.json or yarn.lock file'
    required: false
    default: '**/package-lock.json'
  install-dependencies:
    description: 'Whether to install dependencies'
    required: false
    default: 'true'

outputs:
  cache-hit:
    description: 'Whether dependencies were restored from cache'
    value: ${{ steps.cache-deps.outputs.cache-hit }}
  node-version:
    description: 'The Node.js version that was installed'
    value: ${{ steps.setup-node.outputs.node-version }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      id: setup-node
      uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
      with:
        node-version: ${{ inputs.node-version }}
        check-latest: true
        cache: 'npm'

    - name: Cache Dependencies and Build
      id: cache-deps
      uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
      with:
        path: |
          ~/.npm
          node_modules
          .next/cache
        key: ${{ runner.os }}-node-${{ inputs.node-version }}-${{ hashFiles(inputs.cache-dependency-path) }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ inputs.node-version }}-${{ hashFiles(inputs.cache-dependency-path) }}-
          ${{ runner.os }}-node-${{ inputs.node-version }}-
          ${{ runner.os }}-node-

    - name: Install Dependencies
      if: inputs.install-dependencies == 'true' && steps.cache-deps.outputs.cache-hit != 'true'
      shell: bash
      run: |
        npm ci --prefer-offline --no-audit --frozen-lockfile
      env:
        CI: true
        FORCE_COLOR: 1

    - name: Verify Installation
      shell: bash
      run: |
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "Cache hit: ${{ steps.cache-deps.outputs.cache-hit }}"
        
        # Check if node_modules exists and has content
        if [ -d "node_modules" ] && [ "$(ls -A node_modules)" ]; then
          echo "✅ Dependencies are available"
          echo "Installed packages: $(ls node_modules | wc -l)"
        else
          echo "⚠️ No dependencies found"
        fi