name: 'Build and Test with Performance Monitoring'
description: 'Builds and tests the application with comprehensive monitoring and optimization'

inputs:
  use-bun:
    description: 'Whether to use Bun as the package manager'
    required: false
    default: 'true'
  run-lint:
    description: 'Whether to run linting'
    required: false
    default: 'true'
  run-type-check:
    description: 'Whether to run TypeScript type checking'
    required: false
    default: 'true'
  run-tests:
    description: 'Whether to run tests'
    required: false
    default: 'true'
  run-build:
    description: 'Whether to run build'
    required: false
    default: 'true'
  fail-fast:
    description: 'Whether to fail fast on first error'
    required: false
    default: 'true'
  build-args:
    description: 'Additional build arguments'
    required: false
    default: ''

outputs:
  lint-result:
    description: 'Linting result'
    value: ${{ steps.lint.outputs.result }}
  type-check-result:
    description: 'Type checking result'
    value: ${{ steps.type-check.outputs.result }}
  test-result:
    description: 'Test result'
    value: ${{ steps.test.outputs.result }}
  build-result:
    description: 'Build result'
    value: ${{ steps.build.outputs.result }}
  build-time:
    description: 'Build time in seconds'
    value: ${{ steps.build.outputs.duration }}

runs:
  using: composite
  steps:
    - name: 🔍 ESLint Analysis
      id: lint
      if: inputs.run-lint == 'true'
      shell: bash
      run: |
        echo "🔍 Running ESLint analysis..."
        start_time=$(date +%s)
        
        if [ "${{ inputs.use-bun }}" = "true" ]; then
          PACKAGE_MANAGER="bun run"
        else
          PACKAGE_MANAGER="npm run"
        fi
        
        if $PACKAGE_MANAGER lint; then
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "✅ ESLint passed in ${duration}s"
          echo "result=success" >> $GITHUB_OUTPUT
        else
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "❌ ESLint failed in ${duration}s"
          echo "result=failure" >> $GITHUB_OUTPUT
          
          if [ "${{ inputs.fail-fast }}" = "true" ]; then
            exit 1
          fi
        fi

    - name: 🎯 TypeScript Type Checking
      id: type-check
      if: inputs.run-type-check == 'true'
      shell: bash
      run: |
        echo "🎯 Running TypeScript type checking..."
        start_time=$(date +%s)
        
        if [ "${{ inputs.use-bun }}" = "true" ]; then
          PACKAGE_MANAGER="bun run"
        else
          PACKAGE_MANAGER="npm run"
        fi
        
        if $PACKAGE_MANAGER type-check; then
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "✅ TypeScript check passed in ${duration}s"
          echo "result=success" >> $GITHUB_OUTPUT
        else
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "❌ TypeScript check failed in ${duration}s"
          echo "result=failure" >> $GITHUB_OUTPUT
          
          if [ "${{ inputs.fail-fast }}" = "true" ]; then
            exit 1
          fi
        fi

    - name: 🧪 Run Tests
      id: test
      if: inputs.run-tests == 'true'
      shell: bash
      run: |
        echo "🧪 Running test suite..."
        start_time=$(date +%s)
        
        if [ "${{ inputs.use-bun }}" = "true" ]; then
          PACKAGE_MANAGER="bun run"
        else
          PACKAGE_MANAGER="npm run"
        fi
        
        # Try to run tests, but don't fail if test command doesn't exist
        if $PACKAGE_MANAGER test --passWithNoTests 2>/dev/null || $PACKAGE_MANAGER test:coverage --silent 2>/dev/null; then
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "✅ Tests passed in ${duration}s"
          echo "result=success" >> $GITHUB_OUTPUT
          
          # Try to extract coverage information if available
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct' 2>/dev/null || echo "N/A")
            echo "📊 Test coverage: $COVERAGE%"
          fi
        else
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "⚠️ Tests not available or failed in ${duration}s"
          echo "result=skipped" >> $GITHUB_OUTPUT
          
          # Only fail if tests exist but failed
          if [ "${{ inputs.fail-fast }}" = "true" ] && grep -q '"test"' package.json; then
            echo "❌ Tests are configured but failed"
            exit 1
          fi
        fi

    - name: 🏗️ Build Application
      id: build
      if: inputs.run-build == 'true'
      shell: bash
      run: |
        echo "🏗️ Building application..."
        start_time=$(date +%s)
        
        if [ "${{ inputs.use-bun }}" = "true" ]; then
          PACKAGE_MANAGER="bun run"
        else
          PACKAGE_MANAGER="npm run"
        fi
        
        # Set build environment variables for optimization
        export NEXT_TELEMETRY_DISABLED=1
        export NODE_ENV=production
        export ANALYZE=false
        
        if $PACKAGE_MANAGER build ${{ inputs.build-args }}; then
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "✅ Build completed successfully in ${duration}s"
          echo "result=success" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT
          
          # Analyze build output if available
          if [ -d ".next" ]; then
            echo "📊 Build analysis:"
            
            # Calculate build size
            BUILD_SIZE=$(du -sh .next 2>/dev/null | cut -f1 || echo "Unknown")
            echo "  Build size: $BUILD_SIZE"
            
            # Count generated files
            JS_FILES=$(find .next/static -name "*.js" 2>/dev/null | wc -l || echo "0")
            CSS_FILES=$(find .next/static -name "*.css" 2>/dev/null | wc -l || echo "0")
            echo "  JS files: $JS_FILES"
            echo "  CSS files: $CSS_FILES"
            
            # Check for build optimizations
            if [ -f ".next/build-manifest.json" ]; then
              echo "  ✅ Build manifest generated"
            fi
            
            if [ -d ".next/static/chunks" ]; then
              CHUNK_COUNT=$(ls .next/static/chunks/*.js 2>/dev/null | wc -l || echo "0")
              echo "  Code chunks: $CHUNK_COUNT"
            fi
          fi
          
        else
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "❌ Build failed in ${duration}s"
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "duration=$duration" >> $GITHUB_OUTPUT
          
          if [ "${{ inputs.fail-fast }}" = "true" ]; then
            exit 1
          fi
        fi

    - name: 📊 Performance Summary
      shell: bash
      run: |
        echo "## 🚀 Build & Test Performance Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Result | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        # Lint results
        if [ "${{ inputs.run-lint }}" = "true" ]; then
          LINT_RESULT="${{ steps.lint.outputs.result }}"
          if [ "$LINT_RESULT" = "success" ]; then
            echo "| 🔍 ESLint | ✅ Passed | Code style validation |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔍 ESLint | ❌ Failed | Code style issues found |" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Type check results
        if [ "${{ inputs.run-type-check }}" = "true" ]; then
          TYPE_RESULT="${{ steps.type-check.outputs.result }}"
          if [ "$TYPE_RESULT" = "success" ]; then
            echo "| 🎯 TypeScript | ✅ Passed | Type safety validated |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🎯 TypeScript | ❌ Failed | Type errors found |" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Test results
        if [ "${{ inputs.run-tests }}" = "true" ]; then
          TEST_RESULT="${{ steps.test.outputs.result }}"
          if [ "$TEST_RESULT" = "success" ]; then
            echo "| 🧪 Tests | ✅ Passed | All tests successful |" >> $GITHUB_STEP_SUMMARY
          elif [ "$TEST_RESULT" = "skipped" ]; then
            echo "| 🧪 Tests | ⏭️ Skipped | No tests configured |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 Tests | ❌ Failed | Test failures detected |" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Build results
        if [ "${{ inputs.run-build }}" = "true" ]; then
          BUILD_RESULT="${{ steps.build.outputs.result }}"
          BUILD_TIME="${{ steps.build.outputs.duration }}"
          if [ "$BUILD_RESULT" = "success" ]; then
            echo "| 🏗️ Build | ✅ Passed | Completed in ${BUILD_TIME}s |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🏗️ Build | ❌ Failed | Build errors detected |" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package Manager**: ${{ inputs.use-bun == 'true' && 'Bun' || 'npm' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Completed**: $(date -u)" >> $GITHUB_STEP_SUMMARY